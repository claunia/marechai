// <auto-generated />

using System;
using Marechai.Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace Marechai.Database.Migrations
{
    [DbContext(typeof(MarechaiContext))]
    internal class MarechaiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
            #pragma warning disable 612, 618
            modelBuilder.HasAnnotation("Relational:MaxIdentifierLength", 64).HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Marechai.Database.Models.ApplicationRole", b =>
            {
                b.Property<string>("Id").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("ConcurrencyStamp").IsConcurrencyToken().
                  HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<DateTime>("Created").HasColumnType("datetime(6)");

                b.Property<string>("Description").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Name").HasMaxLength(256).HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                b.Property<string>("NormalizedName").HasMaxLength(256).
                  HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("NormalizedName").IsUnique().HasDatabaseName("RoleNameIndex");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("Marechai.Database.Models.ApplicationUser", b =>
            {
                b.Property<string>("Id").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<int>("AccessFailedCount").HasColumnType("int");

                b.Property<string>("ConcurrencyStamp").IsConcurrencyToken().
                  HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Email").HasMaxLength(256).HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                b.Property<bool>("EmailConfirmed").HasColumnType("bit(1)");

                b.Property<bool>("LockoutEnabled").HasColumnType("bit(1)");

                b.Property<DateTimeOffset?>("LockoutEnd").HasColumnType("datetime(6)");

                b.Property<string>("NormalizedEmail").HasMaxLength(256).
                  HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                b.Property<string>("NormalizedUserName").HasMaxLength(256).
                  HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                b.Property<string>("PasswordHash").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("PhoneNumber").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("PhoneNumberConfirmed").HasColumnType("bit(1)");

                b.Property<string>("SecurityStamp").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("TwoFactorEnabled").HasColumnType("bit(1)");

                b.Property<string>("UserName").HasMaxLength(256).HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail").HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName").IsUnique().HasDatabaseName("UserNameIndex");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("Marechai.Database.Models.Audit", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<string>("AffectedColumns").HasColumnType("json");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Keys").HasColumnType("json");

                b.Property<string>("NewValues").HasColumnType("json");

                b.Property<string>("OldValues").HasColumnType("json");

                b.Property<string>("Table").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<byte>("Type").HasColumnType("tinyint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<string>("UserId").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("Table");

                b.HasIndex("Type");

                b.HasIndex("UserId");

                b.ToTable("Audit");
            });

            modelBuilder.Entity("Marechai.Database.Models.Book", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<short?>("CountryId").HasColumnType("smallint(3)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int?>("Edition").HasColumnType("int");

                b.Property<string>("Isbn").HasMaxLength(13).HasColumnType("varchar(13) CHARACTER SET utf8mb4");

                b.Property<string>("NativeTitle").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<short?>("Pages").HasColumnType("smallint");

                b.Property<long?>("PreviousId").HasColumnType("bigint");

                b.Property<DateTime?>("Published").HasColumnType("datetime(6)");

                b.Property<long?>("SourceId").HasColumnType("bigint");

                b.Property<string>("Synopsis").HasMaxLength(262144).HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Title").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CountryId");

                b.HasIndex("Edition");

                b.HasIndex("Isbn");

                b.HasIndex("NativeTitle");

                b.HasIndex("Pages");

                b.HasIndex("PreviousId").IsUnique();

                b.HasIndex("Published");

                b.HasIndex("SourceId");

                b.HasIndex("Synopsis").HasAnnotation("MySql:FullTextIndex", true);

                b.HasIndex("Title");

                b.ToTable("Books");
            });

            modelBuilder.Entity("Marechai.Database.Models.BookScan", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("char(36)");

                b.Property<string>("Author").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<long>("BookId").HasColumnType("bigint");

                b.Property<ushort?>("ColorSpace").HasColumnType("smallint unsigned");

                b.Property<string>("Comments").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("CreationDate").HasColumnType("datetime(6)");

                b.Property<string>("ExifVersion").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<double?>("HorizontalResolution").HasColumnType("double");

                b.Property<string>("OriginalExtension").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<uint?>("Page").HasColumnType("int unsigned");

                b.Property<ushort?>("ResolutionUnit").HasColumnType("smallint unsigned");

                b.Property<string>("ScannerManufacturer").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("ScannerModel").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("SoftwareUsed").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<uint>("Type").HasColumnType("int unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<DateTime>("UploadDate").IsConcurrencyToken().ValueGeneratedOnAddOrUpdate().
                  HasColumnType("datetime(6)");

                b.Property<string>("UserId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<double?>("VerticalResolution").HasColumnType("double");

                b.HasKey("Id");

                b.HasIndex("Author");

                b.HasIndex("BookId");

                b.HasIndex("ColorSpace");

                b.HasIndex("Comments");

                b.HasIndex("CreationDate");

                b.HasIndex("ExifVersion");

                b.HasIndex("HorizontalResolution");

                b.HasIndex("Page");

                b.HasIndex("ResolutionUnit");

                b.HasIndex("ScannerManufacturer");

                b.HasIndex("ScannerModel");

                b.HasIndex("SoftwareUsed");

                b.HasIndex("Type");

                b.HasIndex("UploadDate");

                b.HasIndex("UserId");

                b.HasIndex("VerticalResolution");

                b.ToTable("BookScans");
            });

            modelBuilder.Entity("Marechai.Database.Models.BooksByMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<long>("BookId").HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("MachineId").HasColumnType("int(11)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("MachineId");

                b.ToTable("BooksByMachines");
            });

            modelBuilder.Entity("Marechai.Database.Models.BooksByMachineFamily", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<long>("BookId").HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("MachineFamilyId").HasColumnType("int(11)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("MachineFamilyId");

                b.ToTable("BooksByMachineFamilies");
            });

            modelBuilder.Entity("Marechai.Database.Models.BrowserTest", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<sbyte>("Agif").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("agif").
                  HasDefaultValueSql("'0'");

                b.Property<string>("Browser").IsRequired().ValueGeneratedOnAdd().HasMaxLength(64).
                  HasColumnType("varchar(64)").HasColumnName("browser").HasDefaultValueSql("''");

                b.Property<sbyte>("Colors").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("colors").
                  HasDefaultValueSql("'0'");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<sbyte>("Flash").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("flash").
                  HasDefaultValueSql("'0'");

                b.Property<sbyte>("Frames").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("frames").
                  HasDefaultValueSql("'0'");

                b.Property<sbyte>("Gif87").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("gif87").
                  HasDefaultValueSql("'0'");

                b.Property<sbyte>("Gif89").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("gif89").
                  HasDefaultValueSql("'0'");

                b.Property<sbyte>("Jpeg").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("jpeg").
                  HasDefaultValueSql("'0'");

                b.Property<sbyte>("Js").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("js").
                  HasDefaultValueSql("'0'");

                b.Property<string>("Os").IsRequired().ValueGeneratedOnAdd().HasMaxLength(32).
                  HasColumnType("varchar(32)").HasColumnName("os").HasDefaultValueSql("''");

                b.Property<string>("Platform").IsRequired().ValueGeneratedOnAdd().HasMaxLength(8).
                  HasColumnType("varchar(8)").HasColumnName("platform").HasDefaultValueSql("''");

                b.Property<sbyte>("Png").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("png").
                  HasDefaultValueSql("'0'");

                b.Property<sbyte>("Pngt").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("pngt").
                  HasDefaultValueSql("'0'");

                b.Property<sbyte>("Table").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("table").
                  HasDefaultValueSql("'0'");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<string>("UserAgent").IsRequired().ValueGeneratedOnAdd().HasMaxLength(128).
                  HasColumnType("varchar(128)").HasColumnName("user_agent").HasDefaultValueSql("''");

                b.Property<string>("Version").IsRequired().ValueGeneratedOnAdd().HasMaxLength(16).
                  HasColumnType("varchar(16)").HasColumnName("version").HasDefaultValueSql("''");

                b.HasKey("Id");

                b.HasIndex("Browser").HasDatabaseName("idx_browser_tests_browser");

                b.HasIndex("Os").HasDatabaseName("idx_browser_tests_os");

                b.HasIndex("Platform").HasDatabaseName("idx_browser_tests_platform");

                b.HasIndex("UserAgent").HasDatabaseName("idx_browser_tests_user_agent");

                b.HasIndex("Version").HasDatabaseName("idx_browser_tests_version");

                b.ToTable("browser_tests");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesByBook", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<long>("BookId").HasColumnType("bigint");

                b.Property<int>("CompanyId").HasColumnType("int");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("CompanyId");

                b.HasIndex("RoleId");

                b.ToTable("CompaniesByBooks");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesByDocument", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<int>("CompanyId").HasColumnType("int");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<long>("DocumentId").HasColumnType("bigint");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId");

                b.HasIndex("DocumentId");

                b.HasIndex("RoleId");

                b.ToTable("CompaniesByDocuments");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesByMagazine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<int>("CompanyId").HasColumnType("int");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<long>("MagazineId").HasColumnType("bigint");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId");

                b.HasIndex("MagazineId");

                b.HasIndex("RoleId");

                b.ToTable("CompaniesByMagazines");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesBySoftwareFamily", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<int>("CompanyId").HasColumnType("int(11)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<ulong>("SoftwareFamilyId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId");

                b.HasIndex("RoleId");

                b.HasIndex("SoftwareFamilyId");

                b.ToTable("CompaniesBySoftwareFamily");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<int>("CompanyId").HasColumnType("int(11)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId");

                b.HasIndex("RoleId");

                b.HasIndex("SoftwareVariantId");

                b.ToTable("CompaniesBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesBySoftwareVersion", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<int>("CompanyId").HasColumnType("int(11)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<ulong>("SoftwareVersionId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId");

                b.HasIndex("RoleId");

                b.HasIndex("SoftwareVersionId");

                b.ToTable("CompaniesBySoftwareVersion");
            });

            modelBuilder.Entity("Marechai.Database.Models.Company", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<string>("Address").HasMaxLength(80).HasColumnType("varchar(80)").HasColumnName("address");

                b.Property<string>("City").HasMaxLength(80).HasColumnType("varchar(80)").HasColumnName("city");

                b.Property<short?>("CountryId").HasColumnType("smallint(3)").HasColumnName("country");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int?>("DocumentCompanyId").HasColumnType("int");

                b.Property<string>("Facebook").HasMaxLength(45).HasColumnType("varchar(45)").HasColumnName("facebook");

                b.Property<DateTime?>("Founded").HasColumnType("datetime").HasColumnName("founded");

                b.Property<bool>("FoundedDayIsUnknown").HasColumnType("bit(1)");

                b.Property<bool>("FoundedMonthIsUnknown").HasColumnType("bit(1)");

                b.Property<string>("LegalName").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Name").IsRequired().ValueGeneratedOnAdd().HasColumnType("varchar(128)").
                  HasColumnName("name").HasDefaultValueSql("''");

                b.Property<string>("PostalCode").HasMaxLength(25).HasColumnType("varchar(25)").
                  HasColumnName("postal_code");

                b.Property<string>("Province").HasMaxLength(80).HasColumnType("varchar(80)").HasColumnName("province");

                b.Property<DateTime?>("Sold").HasColumnType("datetime").HasColumnName("sold");

                b.Property<bool>("SoldDayIsUnknown").HasColumnType("bit(1)");

                b.Property<bool>("SoldMonthIsUnknown").HasColumnType("bit(1)");

                b.Property<int?>("SoldToId").HasColumnType("int(11)").HasColumnName("sold_to");

                b.Property<int>("Status").HasColumnType("int(11)").HasColumnName("status");

                b.Property<string>("Twitter").HasMaxLength(45).HasColumnType("varchar(45)").HasColumnName("twitter");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<string>("Website").HasMaxLength(255).HasColumnType("varchar(255)").HasColumnName("website");

                b.HasKey("Id");

                b.HasIndex("Address").HasDatabaseName("idx_companies_address");

                b.HasIndex("City").HasDatabaseName("idx_companies_city");

                b.HasIndex("CountryId").HasDatabaseName("idx_companies_country");

                b.HasIndex("Facebook").HasDatabaseName("idx_companies_facebook");

                b.HasIndex("Founded").HasDatabaseName("idx_companies_founded");

                b.HasIndex("Name").HasDatabaseName("idx_companies_name");

                b.HasIndex("PostalCode").HasDatabaseName("idx_companies_postal_code");

                b.HasIndex("Province").HasDatabaseName("idx_companies_province");

                b.HasIndex("Sold").HasDatabaseName("idx_companies_sold");

                b.HasIndex("SoldToId").HasDatabaseName("idx_companies_sold_to");

                b.HasIndex("Status").HasDatabaseName("idx_companies_status");

                b.HasIndex("Twitter").HasDatabaseName("idx_companies_twitter");

                b.HasIndex("Website").HasDatabaseName("idx_companies_website");

                b.ToTable("companies");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompanyDescription", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<int>("CompanyId").HasColumnType("int(11)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Html").HasMaxLength(262144).HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Text").IsRequired().HasMaxLength(262144).
                  HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId");

                b.HasIndex("Text").HasAnnotation("MySql:FullTextIndex", true);

                b.ToTable("CompanyDescriptions");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompanyLogo", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<int>("CompanyId").HasColumnType("int(11)").HasColumnName("company_id");

                b.Property<Guid>("Guid").HasColumnType("char(36)").HasColumnName("logo_guid");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<int?>("Year").HasColumnType("int(4)").HasColumnName("year");

                b.HasKey("Id", "CompanyId", "Guid");

                b.HasIndex("CompanyId").HasDatabaseName("idx_company_id");

                b.HasIndex("Guid").HasDatabaseName("idx_guid");

                b.HasIndex("Id").IsUnique().HasDatabaseName("idx_id");

                b.ToTable("company_logos");
            });

            modelBuilder.Entity("Marechai.Database.Models.CurrencyInflation", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("CurrencyCode").IsRequired().HasColumnType("varchar(3) CHARACTER SET utf8mb4");

                b.Property<float>("Inflation").HasColumnType("float");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<uint>("Year").HasColumnType("int unsigned");

                b.HasKey("Id");

                b.HasIndex("CurrencyCode");

                b.HasIndex("Year");

                b.ToTable("CurrenciesInflation");
            });

            modelBuilder.Entity("Marechai.Database.Models.CurrencyPegging", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("DestinationCode").IsRequired().HasColumnType("varchar(3) CHARACTER SET utf8mb4");

                b.Property<DateTime?>("End").HasColumnType("datetime(6)");

                b.Property<float>("Ratio").HasColumnType("float");

                b.Property<string>("SourceCode").IsRequired().HasColumnType("varchar(3) CHARACTER SET utf8mb4");

                b.Property<DateTime>("Start").HasColumnType("datetime(6)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("DestinationCode");

                b.HasIndex("End");

                b.HasIndex("SourceCode");

                b.HasIndex("Start");

                b.ToTable("CurrenciesPegging");
            });

            modelBuilder.Entity("Marechai.Database.Models.DbFile", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<string>("AccoustId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<bool>("Hack").HasColumnType("bit(1)");

                b.Property<string>("HackGroup").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<bool>("Infected").HasColumnType("bit(1)");

                b.Property<string>("Magic").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Malware").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<byte[]>("Md5").HasColumnType("binary(16)");

                b.Property<string>("Mime").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<byte[]>("Sha1").HasColumnType("binary(20)");

                b.Property<byte[]>("Sha256").HasColumnType("binary(32)");

                b.Property<byte[]>("Sha3").HasColumnType("binary(64)");

                b.Property<ulong>("Size").HasColumnType("bigint unsigned");

                b.Property<string>("Spamsum").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("AccoustId");

                b.HasIndex("Hack");

                b.HasIndex("HackGroup");

                b.HasIndex("Infected");

                b.HasIndex("Magic");

                b.HasIndex("Malware");

                b.HasIndex("Md5");

                b.HasIndex("Mime");

                b.HasIndex("Sha1");

                b.HasIndex("Sha256");

                b.HasIndex("Sha3");

                b.HasIndex("Size");

                b.HasIndex("Spamsum");

                b.ToTable("Files");
            });

            modelBuilder.Entity("Marechai.Database.Models.Document", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<short?>("CountryId").HasColumnType("smallint(3)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("NativeTitle").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime?>("Published").HasColumnType("datetime(6)");

                b.Property<string>("Synopsis").HasMaxLength(262144).HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Title").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CountryId");

                b.HasIndex("NativeTitle");

                b.HasIndex("Published");

                b.HasIndex("Synopsis").HasAnnotation("MySql:FullTextIndex", true);

                b.HasIndex("Title");

                b.ToTable("Documents");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentCompany", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<int?>("CompanyId").HasColumnType("int(11)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Name").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId").IsUnique();

                b.HasIndex("Name");

                b.ToTable("DocumentCompanies");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentPerson", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<string>("Alias").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("DisplayName").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Name").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<int?>("PersonId").HasColumnType("int");

                b.Property<string>("Surname").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Alias");

                b.HasIndex("DisplayName");

                b.HasIndex("Name");

                b.HasIndex("PersonId").IsUnique();

                b.HasIndex("Surname");

                b.ToTable("DocumentPeople");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentRole", b =>
            {
                b.Property<string>("Id").HasColumnType("char(3)");

                b.Property<bool>("Enabled").ValueGeneratedOnAdd().HasColumnType("bit(1)").HasDefaultValue(true);

                b.Property<string>("Name").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("Enabled");

                b.HasIndex("Name");

                b.ToTable("DocumentRoles");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentScan", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("char(36)");

                b.Property<string>("Author").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("ColorSpace").HasColumnType("smallint unsigned");

                b.Property<string>("Comments").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("CreationDate").HasColumnType("datetime(6)");

                b.Property<long>("DocumentId").HasColumnType("bigint");

                b.Property<string>("ExifVersion").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<double?>("HorizontalResolution").HasColumnType("double");

                b.Property<string>("OriginalExtension").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<uint?>("Page").HasColumnType("int unsigned");

                b.Property<ushort?>("ResolutionUnit").HasColumnType("smallint unsigned");

                b.Property<string>("ScannerManufacturer").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("ScannerModel").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("SoftwareUsed").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<uint>("Type").HasColumnType("int unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<DateTime>("UploadDate").IsConcurrencyToken().ValueGeneratedOnAddOrUpdate().
                  HasColumnType("datetime(6)");

                b.Property<string>("UserId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<double?>("VerticalResolution").HasColumnType("double");

                b.HasKey("Id");

                b.HasIndex("Author");

                b.HasIndex("ColorSpace");

                b.HasIndex("Comments");

                b.HasIndex("CreationDate");

                b.HasIndex("DocumentId");

                b.HasIndex("ExifVersion");

                b.HasIndex("HorizontalResolution");

                b.HasIndex("Page");

                b.HasIndex("ResolutionUnit");

                b.HasIndex("ScannerManufacturer");

                b.HasIndex("ScannerModel");

                b.HasIndex("SoftwareUsed");

                b.HasIndex("Type");

                b.HasIndex("UploadDate");

                b.HasIndex("UserId");

                b.HasIndex("VerticalResolution");

                b.ToTable("DocumentScans");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentsByMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<long>("DocumentId").HasColumnType("bigint");

                b.Property<int>("MachineId").HasColumnType("int(11)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("DocumentId");

                b.HasIndex("MachineId");

                b.ToTable("DocumentsByMachines");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentsByMachineFamily", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<long>("DocumentId").HasColumnType("bigint");

                b.Property<int>("MachineFamilyId").HasColumnType("int(11)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("DocumentId");

                b.HasIndex("MachineFamilyId");

                b.ToTable("DocumentsByMachineFamily");
            });

            modelBuilder.Entity("Marechai.Database.Models.Dump", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("DumpDate").HasColumnType("datetime(6)");

                b.Property<string>("Dumper").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("DumpingGroup").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ulong>("MediaDumpId").HasColumnType("bigint unsigned");

                b.Property<ulong>("MediaId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<string>("UserId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("DumpDate");

                b.HasIndex("Dumper");

                b.HasIndex("DumpingGroup");

                b.HasIndex("MediaDumpId");

                b.HasIndex("MediaId");

                b.HasIndex("UserId");

                b.ToTable("Dumps");
            });

            modelBuilder.Entity("Marechai.Database.Models.DumpHardware", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("DumpId").HasColumnType("bigint unsigned");

                b.Property<string>("Extents").IsRequired().HasColumnType("json");

                b.Property<string>("Firmware").HasMaxLength(32).HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                b.Property<string>("Manufacturer").HasMaxLength(48).HasColumnType("varchar(48) CHARACTER SET utf8mb4");

                b.Property<string>("Model").IsRequired().HasMaxLength(48).
                  HasColumnType("varchar(48) CHARACTER SET utf8mb4");

                b.Property<string>("Revision").HasMaxLength(48).HasColumnType("varchar(48) CHARACTER SET utf8mb4");

                b.Property<string>("Serial").HasMaxLength(64).HasColumnType("varchar(64) CHARACTER SET utf8mb4");

                b.Property<string>("SoftwareName").IsRequired().HasMaxLength(64).
                  HasColumnType("varchar(64) CHARACTER SET utf8mb4");

                b.Property<string>("SoftwareOperatingSystem").HasMaxLength(64).
                  HasColumnType("varchar(64) CHARACTER SET utf8mb4");

                b.Property<string>("SoftwareVersion").HasMaxLength(32).
                  HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("DumpId");

                b.HasIndex("Firmware");

                b.HasIndex("Manufacturer");

                b.HasIndex("Model");

                b.HasIndex("Revision");

                b.HasIndex("Serial");

                b.HasIndex("SoftwareName");

                b.HasIndex("SoftwareOperatingSystem");

                b.HasIndex("SoftwareVersion");

                b.ToTable("DumpHardwares");
            });

            modelBuilder.Entity("Marechai.Database.Models.FileDataStream", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("FileId").HasColumnType("bigint unsigned");

                b.Property<string>("Name").HasMaxLength(255).HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ulong>("Size").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("FileId");

                b.HasIndex("Name");

                b.HasIndex("Size");

                b.ToTable("FileDataStreams");
            });

            modelBuilder.Entity("Marechai.Database.Models.FileDataStreamsByMediaFile", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("FileDataStreamId").HasColumnType("bigint unsigned");

                b.Property<ulong>("MediaFileId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("FileDataStreamId");

                b.HasIndex("MediaFileId");

                b.ToTable("FileDataStreamsByMediaFile");
            });

            modelBuilder.Entity("Marechai.Database.Models.FileDataStreamsByStandaloneFile", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("FileDataStreamId").HasColumnType("bigint unsigned");

                b.Property<ulong>("StandaloneFileId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("FileDataStreamId");

                b.HasIndex("StandaloneFileId");

                b.ToTable("FileDataStreamsByStandaloneFile");
            });

            modelBuilder.Entity("Marechai.Database.Models.FilesByFilesystem", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("FileId").HasColumnType("bigint unsigned");

                b.Property<ulong>("FilesystemId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("FileId");

                b.HasIndex("FilesystemId");

                b.ToTable("FilesByFilesystem");
            });

            modelBuilder.Entity("Marechai.Database.Models.Filesystem", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<string>("ApplicationIdentifier").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime?>("BackupDate").HasColumnType("datetime(6)");

                b.Property<bool>("Bootable").HasColumnType("bit(1)");

                b.Property<int>("ClusterSize").HasColumnType("int");

                b.Property<ulong>("Clusters").HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("CreationDate").HasColumnType("datetime(6)");

                b.Property<string>("DataPreparerIdentifier").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime?>("EffectiveDate").HasColumnType("datetime(6)");

                b.Property<DateTime?>("ExpirationDate").HasColumnType("datetime(6)");

                b.Property<ulong?>("FilesCount").HasColumnType("bigint unsigned");

                b.Property<ulong?>("FreeClusters").HasColumnType("bigint unsigned");

                b.Property<string>("Label").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime?>("ModificationDate").HasColumnType("datetime(6)");

                b.Property<string>("PublisherIdentifier").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Serial").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("SystemIdentifier").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Type").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<string>("VolumeSetIdentifier").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("ApplicationIdentifier");

                b.HasIndex("BackupDate");

                b.HasIndex("CreationDate");

                b.HasIndex("DataPreparerIdentifier");

                b.HasIndex("Label");

                b.HasIndex("ModificationDate");

                b.HasIndex("PublisherIdentifier");

                b.HasIndex("Serial");

                b.HasIndex("SystemIdentifier");

                b.HasIndex("Type");

                b.HasIndex("VolumeSetIdentifier");

                b.ToTable("Filesystems");
            });

            modelBuilder.Entity("Marechai.Database.Models.FilesystemsByLogicalPartition", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("FilesystemId").HasColumnType("bigint unsigned");

                b.Property<ulong>("PartitionId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("FilesystemId");

                b.HasIndex("PartitionId");

                b.ToTable("FilesystemsByLogicalPartition");
            });

            modelBuilder.Entity("Marechai.Database.Models.FilesystemsByMediaDumpFile", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("FilesystemId").HasColumnType("bigint unsigned");

                b.Property<ulong>("MediaDumpFileImageId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("FilesystemId");

                b.HasIndex("MediaDumpFileImageId");

                b.ToTable("FilesystemsByMediaDumpFile");
            });

            modelBuilder.Entity("Marechai.Database.Models.Forbidden", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<string>("Browser").IsRequired().ValueGeneratedOnAdd().HasColumnType("char(128)").
                  HasColumnName("browser").HasDefaultValueSql("''");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Date").IsRequired().ValueGeneratedOnAdd().HasColumnType("char(20)").
                  HasColumnName("date").HasDefaultValueSql("''");

                b.Property<string>("Ip").IsRequired().ValueGeneratedOnAdd().HasColumnType("char(16)").
                  HasColumnName("ip").HasDefaultValueSql("''");

                b.Property<string>("Referer").IsRequired().ValueGeneratedOnAdd().HasColumnType("char(255)").
                  HasColumnName("referer").HasDefaultValueSql("''");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Browser").HasDatabaseName("idx_forbidden_browser");

                b.HasIndex("Date").HasDatabaseName("idx_forbidden_date");

                b.HasIndex("Ip").HasDatabaseName("idx_forbidden_ip");

                b.HasIndex("Referer").HasDatabaseName("idx_forbidden_referer");

                b.ToTable("forbidden");
            });

            modelBuilder.Entity("Marechai.Database.Models.Gpu", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<int?>("CompanyId").HasColumnType("int(11)").HasColumnName("company");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<float?>("DieSize").HasColumnType("float").HasColumnName("die_size");

                b.Property<DateTime?>("Introduced").HasColumnType("datetime").HasColumnName("introduced");

                b.Property<string>("ModelCode").HasMaxLength(45).HasColumnType("varchar(45)").
                  HasColumnName("model_code");

                b.Property<string>("Name").IsRequired().ValueGeneratedOnAdd().HasMaxLength(128).
                  HasColumnType("char(128)").HasColumnName("name").HasDefaultValueSql("''");

                b.Property<string>("Package").HasMaxLength(45).HasColumnType("varchar(45)").HasColumnName("package");

                b.Property<string>("Process").HasMaxLength(45).HasColumnType("varchar(45)").HasColumnName("process");

                b.Property<float?>("ProcessNm").HasColumnType("float").HasColumnName("process_nm");

                b.Property<long?>("Transistors").HasColumnType("bigint(20)").HasColumnName("transistors");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId").HasDatabaseName("idx_gpus_company");

                b.HasIndex("DieSize").HasDatabaseName("idx_gpus_die_size");

                b.HasIndex("Introduced").HasDatabaseName("idx_gpus_introduced");

                b.HasIndex("ModelCode").HasDatabaseName("idx_gpus_model_code");

                b.HasIndex("Name").HasDatabaseName("idx_gpus_name");

                b.HasIndex("Package").HasDatabaseName("idx_gpus_package");

                b.HasIndex("Process").HasDatabaseName("idx_gpus_process");

                b.HasIndex("ProcessNm").HasDatabaseName("idx_gpus_process_nm");

                b.HasIndex("Transistors").HasDatabaseName("idx_gpus_transistors");

                b.ToTable("gpus");
            });

            modelBuilder.Entity("Marechai.Database.Models.GpusByMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint(20)").HasColumnName("id");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("GpuId").HasColumnType("int(11)").HasColumnName("gpu");

                b.Property<int>("MachineId").HasColumnType("int(11)").HasColumnName("machine");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("GpuId").HasDatabaseName("idx_gpus_by_machine_gpus");

                b.HasIndex("MachineId").HasDatabaseName("idx_gpus_by_machine_machine");

                b.ToTable("gpus_by_machine");
            });

            modelBuilder.Entity("Marechai.Database.Models.GpusByOwnedMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("GpuId").HasColumnType("int(11)");

                b.Property<long>("OwnedMachineId").HasColumnType("bigint");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("GpuId");

                b.HasIndex("OwnedMachineId");

                b.ToTable("GpusByOwnedMachine");
            });

            modelBuilder.Entity("Marechai.Database.Models.GpusBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("GpuId").HasColumnType("int(11)");

                b.Property<bool?>("Minimum").HasColumnType("bit(1)");

                b.Property<bool?>("Recommended").HasColumnType("bit(1)");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("GpuId");

                b.HasIndex("Minimum");

                b.HasIndex("Recommended");

                b.HasIndex("SoftwareVariantId");

                b.ToTable("GpusBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.InstructionSet", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Name").IsRequired().HasMaxLength(45).HasColumnType("varchar(45)").
                  HasColumnName("instruction_set");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.ToTable("instruction_sets");
            });

            modelBuilder.Entity("Marechai.Database.Models.InstructionSetExtension", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Extension").IsRequired().HasMaxLength(45).HasColumnType("varchar(45)").
                  HasColumnName("extension");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.ToTable("instruction_set_extensions");
            });

            modelBuilder.Entity("Marechai.Database.Models.InstructionSetExtensionsByProcessor", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<int>("ProcessorId").HasColumnType("int(11)").HasColumnName("processor_id");

                b.Property<int>("ExtensionId").HasColumnType("int(11)").HasColumnName("extension_id");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id", "ProcessorId", "ExtensionId");

                b.HasIndex("ExtensionId").HasDatabaseName("idx_setextension_extension");

                b.HasIndex("ProcessorId").HasDatabaseName("idx_setextension_processor");

                b.ToTable("instruction_set_extensions_by_processor");
            });

            modelBuilder.Entity("Marechai.Database.Models.InstructionSetsBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("InstructionSetId").HasColumnType("int(11)");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("InstructionSetId");

                b.HasIndex("SoftwareVariantId");

                b.ToTable("InstructionSetsBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.Iso31661Numeric", b =>
            {
                b.Property<short>("Id").ValueGeneratedOnAdd().HasColumnType("smallint(3)").HasColumnName("id");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Name").IsRequired().HasMaxLength(64).HasColumnType("varchar(64)").
                  HasColumnName("name");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Name").HasDatabaseName("idx_name");

                b.ToTable("iso3166_1_numeric");
            });

            modelBuilder.Entity("Marechai.Database.Models.Iso4217", b =>
            {
                b.Property<string>("Code").HasMaxLength(3).HasColumnType("varchar(3) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<byte?>("MinorUnits").HasColumnType("tinyint unsigned");

                b.Property<string>("Name").IsRequired().HasMaxLength(150).
                  HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                b.Property<short>("Numeric").HasColumnType("smallint(3)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<DateTime?>("Withdrawn").HasColumnType("datetime(6)");

                b.HasKey("Code");

                b.HasIndex("Numeric");

                b.HasIndex("Withdrawn");

                b.ToTable("Iso4217");
            });

            modelBuilder.Entity("Marechai.Database.Models.Iso639", b =>
            {
                b.Property<string>("Id").HasColumnType("char(3)");

                b.Property<string>("Comment").HasColumnType("varchar(150)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Part1").HasColumnType("char(2)");

                b.Property<string>("Part2B").HasColumnType("char(3)");

                b.Property<string>("Part2T").HasColumnType("char(3)");

                b.Property<string>("ReferenceName").IsRequired().HasColumnType("varchar(150)").
                  HasColumnName("Ref_Name");

                b.Property<string>("Scope").IsRequired().HasColumnType("char(1)");

                b.Property<string>("Type").IsRequired().HasColumnType("char(1)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Comment");

                b.HasIndex("Part1");

                b.HasIndex("Part2B");

                b.HasIndex("Part2T");

                b.HasIndex("ReferenceName");

                b.HasIndex("Scope");

                b.HasIndex("Type");

                b.ToTable("ISO_639-3");
            });

            modelBuilder.Entity("Marechai.Database.Models.LanguagesBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("LanguageId").IsRequired().HasColumnType("char(3)");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("LanguageId");

                b.HasIndex("SoftwareVariantId");

                b.ToTable("LanguagesBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.License", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<bool>("FsfApproved").HasColumnType("bit(1)");

                b.Property<string>("Link").HasMaxLength(512).HasColumnType("varchar(512) CHARACTER SET utf8mb4");

                b.Property<string>("Name").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<bool>("OsiApproved").HasColumnType("bit(1)");

                b.Property<string>("SPDX").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Text").HasMaxLength(131072).HasColumnType("longtext");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("FsfApproved");

                b.HasIndex("Name");

                b.HasIndex("OsiApproved");

                b.HasIndex("SPDX");

                b.ToTable("Licenses");
            });

            modelBuilder.Entity("Marechai.Database.Models.Log", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<string>("Browser").IsRequired().ValueGeneratedOnAdd().HasColumnType("char(128)").
                  HasColumnName("browser").HasDefaultValueSql("''");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Date").IsRequired().ValueGeneratedOnAdd().HasColumnType("char(20)").
                  HasColumnName("date").HasDefaultValueSql("''");

                b.Property<string>("Ip").IsRequired().ValueGeneratedOnAdd().HasColumnType("char(16)").
                  HasColumnName("ip").HasDefaultValueSql("''");

                b.Property<string>("Referer").IsRequired().ValueGeneratedOnAdd().HasColumnType("char(255)").
                  HasColumnName("referer").HasDefaultValueSql("''");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Browser").HasDatabaseName("idx_log_browser");

                b.HasIndex("Date").HasDatabaseName("idx_log_date");

                b.HasIndex("Ip").HasDatabaseName("idx_log_ip");

                b.HasIndex("Referer").HasDatabaseName("idx_log_referer");

                b.ToTable("log");
            });

            modelBuilder.Entity("Marechai.Database.Models.LogicalPartition", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Description").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ulong>("FirstSector").HasColumnType("bigint unsigned");

                b.Property<ulong>("LastSector").HasColumnType("bigint unsigned");

                b.Property<string>("Name").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Scheme").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<uint>("Sequence").HasColumnType("int unsigned");

                b.Property<ulong>("Size").HasColumnType("bigint unsigned");

                b.Property<string>("Type").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Description");

                b.HasIndex("FirstSector");

                b.HasIndex("LastSector");

                b.HasIndex("Name");

                b.HasIndex("Scheme");

                b.HasIndex("Type");

                b.ToTable("LogicalPartitions");
            });

            modelBuilder.Entity("Marechai.Database.Models.LogicalPartitionsByMedia", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("MediaId").HasColumnType("bigint unsigned");

                b.Property<ulong>("PartitionId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MediaId");

                b.HasIndex("PartitionId");

                b.ToTable("LogicalPartitionsByMedia");
            });

            modelBuilder.Entity("Marechai.Database.Models.Machine", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<int>("CompanyId").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("company").
                  HasDefaultValueSql("'0'");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int?>("FamilyId").HasColumnType("int(11)").HasColumnName("family");

                b.Property<DateTime?>("Introduced").HasColumnType("datetime").HasColumnName("introduced");

                b.Property<string>("Model").HasMaxLength(50).HasColumnType("varchar(50)").HasColumnName("model");

                b.Property<string>("Name").IsRequired().HasMaxLength(255).HasColumnType("varchar(255)").
                  HasColumnName("name");

                b.Property<int>("Type").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("type").
                  HasDefaultValueSql("'0'");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId").HasDatabaseName("idx_machines_company");

                b.HasIndex("FamilyId").HasDatabaseName("idx_machines_family");

                b.HasIndex("Introduced").HasDatabaseName("idx_machines_introduced");

                b.HasIndex("Model").HasDatabaseName("idx_machines_model");

                b.HasIndex("Name").HasDatabaseName("idx_machines_name");

                b.HasIndex("Type").HasDatabaseName("idx_machines_type");

                b.ToTable("machines");
            });

            modelBuilder.Entity("Marechai.Database.Models.MachineFamiliesBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("MachineFamilyId").HasColumnType("int(11)");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MachineFamilyId");

                b.HasIndex("SoftwareVariantId");

                b.ToTable("MachineFamiliesBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.MachineFamily", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<int>("CompanyId").HasColumnType("int(11)").HasColumnName("company");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Name").IsRequired().HasMaxLength(255).HasColumnType("varchar(255)").
                  HasColumnName("name");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId").HasDatabaseName("idx_machine_families_company");

                b.HasIndex("Name").HasDatabaseName("idx_machine_families_name");

                b.ToTable("machine_families");
            });

            modelBuilder.Entity("Marechai.Database.Models.MachinePhoto", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("char(36)");

                b.Property<double?>("Aperture").HasColumnType("double");

                b.Property<string>("Author").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("CameraManufacturer").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("CameraModel").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("ColorSpace").HasColumnType("smallint unsigned");

                b.Property<string>("Comments").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("Contrast").HasColumnType("smallint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("CreationDate").HasColumnType("datetime(6)");

                b.Property<double?>("DigitalZoomRatio").HasColumnType("double");

                b.Property<string>("ExifVersion").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("ExposureMethod").HasColumnType("smallint unsigned");

                b.Property<ushort?>("ExposureProgram").HasColumnType("smallint unsigned");

                b.Property<double?>("ExposureTime").HasColumnType("double");

                b.Property<ushort?>("Flash").HasColumnType("smallint unsigned");

                b.Property<double?>("Focal").HasColumnType("double");

                b.Property<double?>("FocalLength").HasColumnType("double");

                b.Property<double?>("FocalLengthEquivalent").HasColumnType("double");

                b.Property<double?>("HorizontalResolution").HasColumnType("double");

                b.Property<ushort?>("IsoRating").HasColumnType("smallint unsigned");

                b.Property<string>("Lens").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<int>("LicenseId").HasColumnType("int");

                b.Property<ushort?>("LightSource").HasColumnType("smallint unsigned");

                b.Property<int>("MachineId").HasColumnType("int(11)");

                b.Property<ushort?>("MeteringMode").HasColumnType("smallint unsigned");

                b.Property<ushort?>("Orientation").HasColumnType("smallint unsigned");

                b.Property<string>("OriginalExtension").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<ushort?>("ResolutionUnit").HasColumnType("smallint unsigned");

                b.Property<ushort?>("Saturation").HasColumnType("smallint unsigned");

                b.Property<ushort?>("SceneCaptureType").HasColumnType("smallint unsigned");

                b.Property<ushort?>("SensingMethod").HasColumnType("smallint unsigned");

                b.Property<ushort?>("Sharpness").HasColumnType("smallint unsigned");

                b.Property<string>("SoftwareUsed").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Source").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<ushort?>("SubjectDistanceRange").HasColumnType("smallint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<DateTime>("UploadDate").IsConcurrencyToken().ValueGeneratedOnAddOrUpdate().
                  HasColumnType("datetime(6)");

                b.Property<string>("UserId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<double?>("VerticalResolution").HasColumnType("double");

                b.Property<ushort?>("WhiteBalance").HasColumnType("smallint unsigned");

                b.HasKey("Id");

                b.HasIndex("Aperture");

                b.HasIndex("Author");

                b.HasIndex("CameraManufacturer");

                b.HasIndex("CameraModel");

                b.HasIndex("ColorSpace");

                b.HasIndex("Comments");

                b.HasIndex("Contrast");

                b.HasIndex("CreationDate");

                b.HasIndex("DigitalZoomRatio");

                b.HasIndex("ExifVersion");

                b.HasIndex("ExposureMethod");

                b.HasIndex("ExposureProgram");

                b.HasIndex("ExposureTime");

                b.HasIndex("Flash");

                b.HasIndex("Focal");

                b.HasIndex("FocalLength");

                b.HasIndex("FocalLengthEquivalent");

                b.HasIndex("HorizontalResolution");

                b.HasIndex("IsoRating");

                b.HasIndex("Lens");

                b.HasIndex("LicenseId");

                b.HasIndex("LightSource");

                b.HasIndex("MachineId");

                b.HasIndex("MeteringMode");

                b.HasIndex("Orientation");

                b.HasIndex("ResolutionUnit");

                b.HasIndex("Saturation");

                b.HasIndex("SceneCaptureType");

                b.HasIndex("SensingMethod");

                b.HasIndex("Sharpness");

                b.HasIndex("SoftwareUsed");

                b.HasIndex("SubjectDistanceRange");

                b.HasIndex("UploadDate");

                b.HasIndex("UserId");

                b.HasIndex("VerticalResolution");

                b.HasIndex("WhiteBalance");

                b.ToTable("MachinePhotos");
            });

            modelBuilder.Entity("Marechai.Database.Models.MachinesBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("MachineId").HasColumnType("int(11)");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MachineId");

                b.HasIndex("SoftwareVariantId");

                b.ToTable("MachinesBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.Magazine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<short?>("CountryId").HasColumnType("smallint(3)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("FirstPublication").HasColumnType("datetime(6)");

                b.Property<string>("Issn").HasMaxLength(8).HasColumnType("varchar(8) CHARACTER SET utf8mb4");

                b.Property<string>("NativeTitle").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime?>("Published").HasColumnType("datetime(6)");

                b.Property<string>("Synopsis").HasMaxLength(262144).HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Title").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CountryId");

                b.HasIndex("FirstPublication");

                b.HasIndex("Issn");

                b.HasIndex("NativeTitle");

                b.HasIndex("Published");

                b.HasIndex("Synopsis").HasAnnotation("MySql:FullTextIndex", true);

                b.HasIndex("Title");

                b.ToTable("Magazines");
            });

            modelBuilder.Entity("Marechai.Database.Models.MagazineIssue", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<string>("Caption").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<uint?>("IssueNumber").HasColumnType("int unsigned");

                b.Property<long>("MagazineId").HasColumnType("bigint");

                b.Property<string>("NativeCaption").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<short?>("Pages").HasColumnType("smallint");

                b.Property<string>("ProductCode").HasMaxLength(18).HasColumnType("varchar(18) CHARACTER SET utf8mb4");

                b.Property<DateTime?>("Published").HasColumnType("datetime(6)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Caption");

                b.HasIndex("MagazineId");

                b.HasIndex("NativeCaption");

                b.HasIndex("Pages");

                b.HasIndex("ProductCode");

                b.HasIndex("Published");

                b.ToTable("MagazineIssues");
            });

            modelBuilder.Entity("Marechai.Database.Models.MagazineScan", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("char(36)");

                b.Property<string>("Author").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("ColorSpace").HasColumnType("smallint unsigned");

                b.Property<string>("Comments").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("CreationDate").HasColumnType("datetime(6)");

                b.Property<string>("ExifVersion").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<double?>("HorizontalResolution").HasColumnType("double");

                b.Property<long>("MagazineId").HasColumnType("bigint");

                b.Property<string>("OriginalExtension").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<uint?>("Page").HasColumnType("int unsigned");

                b.Property<ushort?>("ResolutionUnit").HasColumnType("smallint unsigned");

                b.Property<string>("ScannerManufacturer").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("ScannerModel").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("SoftwareUsed").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<uint>("Type").HasColumnType("int unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<DateTime>("UploadDate").IsConcurrencyToken().ValueGeneratedOnAddOrUpdate().
                  HasColumnType("datetime(6)");

                b.Property<string>("UserId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<double?>("VerticalResolution").HasColumnType("double");

                b.HasKey("Id");

                b.HasIndex("Author");

                b.HasIndex("ColorSpace");

                b.HasIndex("Comments");

                b.HasIndex("CreationDate");

                b.HasIndex("ExifVersion");

                b.HasIndex("HorizontalResolution");

                b.HasIndex("MagazineId");

                b.HasIndex("Page");

                b.HasIndex("ResolutionUnit");

                b.HasIndex("ScannerManufacturer");

                b.HasIndex("ScannerModel");

                b.HasIndex("SoftwareUsed");

                b.HasIndex("Type");

                b.HasIndex("UploadDate");

                b.HasIndex("UserId");

                b.HasIndex("VerticalResolution");

                b.ToTable("MagazineScans");
            });

            modelBuilder.Entity("Marechai.Database.Models.MagazinesByMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("MachineId").HasColumnType("int(11)");

                b.Property<long>("MagazineId").HasColumnType("bigint");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MachineId");

                b.HasIndex("MagazineId");

                b.ToTable("MagazinesByMachines");
            });

            modelBuilder.Entity("Marechai.Database.Models.MagazinesByMachineFamily", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("MachineFamilyId").HasColumnType("int(11)");

                b.Property<long>("MagazineId").HasColumnType("bigint");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MachineFamilyId");

                b.HasIndex("MagazineId");

                b.ToTable("MagazinesByMachinesFamilies");
            });

            modelBuilder.Entity("Marechai.Database.Models.MarechaiDb", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<DateTimeOffset?>("Updated").ValueGeneratedOnAdd().HasColumnType("datetime").
                  HasColumnName("updated").HasDefaultValueSql("CURRENT_TIMESTAMP");

                b.Property<int>("Version").HasColumnType("int(11)").HasColumnName("version");

                b.HasKey("Id");

                b.ToTable("marechai_db");
            });

            modelBuilder.Entity("Marechai.Database.Models.MasteringText", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<short?>("Layer").HasColumnType("smallint");

                b.Property<ulong>("MediaId").HasColumnType("bigint unsigned");

                b.Property<short?>("Side").HasColumnType("smallint");

                b.Property<string>("Text").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<byte>("Type").HasColumnType("tinyint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MediaId");

                b.HasIndex("Text");

                b.HasIndex("Type");

                b.ToTable("MasteringTexts");
            });

            modelBuilder.Entity("Marechai.Database.Models.Media", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<string>("Barcode").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("BlockSizes").HasColumnType("json");

                b.Property<string>("CatalogueNumber").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("CopyProtection").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Firmware").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("LastSequence").HasColumnType("smallint unsigned");

                b.Property<ushort?>("Layers").HasColumnType("smallint unsigned");

                b.Property<int?>("LogicalBlockSize").HasColumnType("int");

                b.Property<long?>("MagazineIssueId").HasColumnType("bigint");

                b.Property<string>("Manufacturer").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Model").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("PartNumber").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<int?>("PhysicalBlockSize").HasColumnType("int");

                b.Property<string>("Revision").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ulong>("Sectors").HasColumnType("bigint unsigned");

                b.Property<ushort?>("Sequence").HasColumnType("smallint unsigned");

                b.Property<string>("SerialNumber").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("Sessions").HasColumnType("smallint unsigned");

                b.Property<ushort?>("Sides").HasColumnType("smallint unsigned");

                b.Property<ulong>("Size").HasColumnType("bigint unsigned");

                b.Property<int?>("StorageInterface").HasColumnType("int");

                b.Property<string>("TableOfContents").HasColumnType("json");

                b.Property<string>("Title").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("Tracks").HasColumnType("smallint unsigned");

                b.Property<uint>("Type").HasColumnType("int unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<int?>("WriteOffset").HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("Barcode");

                b.HasIndex("CatalogueNumber");

                b.HasIndex("CopyProtection");

                b.HasIndex("Firmware");

                b.HasIndex("MagazineIssueId");

                b.HasIndex("Manufacturer");

                b.HasIndex("Model");

                b.HasIndex("PartNumber");

                b.HasIndex("Revision");

                b.HasIndex("SerialNumber");

                b.HasIndex("Title");

                b.HasIndex("Type");

                b.ToTable("Media");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("MediaId").HasColumnType("bigint unsigned");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MediaId");

                b.HasIndex("SoftwareVariantId");

                b.ToTable("MediaBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDump", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Format").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ulong>("MediaId").HasColumnType("bigint unsigned");

                b.Property<ulong>("Status").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Format");

                b.HasIndex("MediaId");

                b.HasIndex("Status");

                b.ToTable("MediaDumps");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDumpFileImage", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<long>("FileSequence").HasColumnType("bigint");

                b.Property<byte[]>("Md5").HasColumnType("binary(16)");

                b.Property<ulong>("MediaDumpId").HasColumnType("bigint unsigned");

                b.Property<short>("PartitionSequence").HasColumnType("smallint");

                b.Property<byte[]>("Sha1").HasColumnType("binary(20)");

                b.Property<byte[]>("Sha256").HasColumnType("binary(32)");

                b.Property<byte[]>("Sha3").HasColumnType("binary(64)");

                b.Property<ulong>("Size").HasColumnType("bigint unsigned");

                b.Property<string>("Spamsum").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Md5");

                b.HasIndex("MediaDumpId");

                b.HasIndex("Sha1");

                b.HasIndex("Sha256");

                b.HasIndex("Sha3");

                b.HasIndex("Size");

                b.HasIndex("Spamsum");

                b.ToTable("MediaDumpFileImages");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDumpImage", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<string>("AccoustId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<byte[]>("Md5").HasColumnType("binary(16)");

                b.Property<ulong>("MediaDumpId").HasColumnType("bigint unsigned");

                b.Property<byte[]>("Sha1").HasColumnType("binary(20)");

                b.Property<byte[]>("Sha256").HasColumnType("binary(32)");

                b.Property<byte[]>("Sha3").HasColumnType("binary(64)");

                b.Property<ulong>("Size").HasColumnType("bigint unsigned");

                b.Property<string>("Spamsum").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("AccoustId");

                b.HasIndex("Md5");

                b.HasIndex("MediaDumpId").IsUnique();

                b.HasIndex("Sha1");

                b.HasIndex("Sha256");

                b.HasIndex("Sha3");

                b.HasIndex("Size");

                b.HasIndex("Spamsum");

                b.ToTable("MediaDumpImages");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDumpSubchannelImage", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<byte[]>("Md5").HasColumnType("binary(16)");

                b.Property<ulong?>("MediaDumpId").HasColumnType("bigint unsigned");

                b.Property<byte[]>("Sha1").HasColumnType("binary(20)");

                b.Property<byte[]>("Sha256").HasColumnType("binary(32)");

                b.Property<byte[]>("Sha3").HasColumnType("binary(64)");

                b.Property<ulong>("Size").HasColumnType("bigint unsigned");

                b.Property<string>("Spamsum").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<byte>("Status").HasColumnType("tinyint unsigned");

                b.Property<ulong?>("TrackId").HasColumnType("bigint unsigned");

                b.Property<short>("TrackSequence").HasColumnType("smallint");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Md5");

                b.HasIndex("MediaDumpId").IsUnique();

                b.HasIndex("Sha1");

                b.HasIndex("Sha256");

                b.HasIndex("Sha3");

                b.HasIndex("Size");

                b.HasIndex("Spamsum");

                b.HasIndex("TrackId").IsUnique();

                b.ToTable("MediaDumpSubchannelImages");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDumpTrackImage", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Format").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<byte[]>("Md5").HasColumnType("binary(16)");

                b.Property<ulong?>("MediaDumpId").HasColumnType("bigint unsigned");

                b.Property<byte[]>("Sha1").HasColumnType("binary(20)");

                b.Property<byte[]>("Sha256").HasColumnType("binary(32)");

                b.Property<byte[]>("Sha3").HasColumnType("binary(64)");

                b.Property<ulong>("Size").HasColumnType("bigint unsigned");

                b.Property<string>("Spamsum").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<short>("TrackSequence").HasColumnType("smallint");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Format");

                b.HasIndex("Md5");

                b.HasIndex("MediaDumpId");

                b.HasIndex("Sha1");

                b.HasIndex("Sha256");

                b.HasIndex("Sha3");

                b.HasIndex("Size");

                b.HasIndex("Spamsum");

                b.ToTable("MediaDumpTrackImages");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaFile", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime?>("AccessDate").HasColumnType("datetime(6)");

                b.Property<ulong>("Attributes").HasColumnType("bigint unsigned");

                b.Property<DateTime?>("BackupDate").HasColumnType("datetime(6)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("CreationDate").HasColumnType("datetime(6)");

                b.Property<uint?>("DeviceNumber").HasColumnType("int unsigned");

                b.Property<ulong?>("GroupId").HasColumnType("bigint unsigned");

                b.Property<ulong?>("Inode").HasColumnType("bigint unsigned");

                b.Property<bool>("IsDirectory").HasColumnType("bit(1)");

                b.Property<DateTime?>("LastWriteDate").HasColumnType("datetime(6)");

                b.Property<ulong?>("Links").HasColumnType("bigint unsigned");

                b.Property<string>("Name").IsRequired().HasMaxLength(255).
                  HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Path").IsRequired().HasMaxLength(8192).
                  HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("PathSeparator").IsRequired().HasColumnType("varchar(1) CHARACTER SET utf8mb4");

                b.Property<ushort?>("PosixMode").HasColumnType("smallint unsigned");

                b.Property<DateTime?>("StatusChangeDate").HasColumnType("datetime(6)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<ulong?>("UserId").HasColumnType("bigint unsigned");

                b.HasKey("Id");

                b.HasIndex("AccessDate");

                b.HasIndex("BackupDate");

                b.HasIndex("CreationDate");

                b.HasIndex("GroupId");

                b.HasIndex("IsDirectory");

                b.HasIndex("LastWriteDate");

                b.HasIndex("Name");

                b.HasIndex("Path");

                b.HasIndex("StatusChangeDate");

                b.HasIndex("UserId");

                b.ToTable("MediaFiles");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaTagDump", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("FileId").HasColumnType("bigint unsigned");

                b.Property<ulong>("MediaDumpId").HasColumnType("bigint unsigned");

                b.Property<int>("Type").HasColumnType("int");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("FileId");

                b.HasIndex("MediaDumpId");

                b.HasIndex("Type");

                b.ToTable("MediaTagDumps");
            });

            modelBuilder.Entity("Marechai.Database.Models.MemoryByMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint(20)").HasColumnName("id");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("MachineId").HasColumnType("int(11)").HasColumnName("machine");

                b.Property<long?>("Size").HasColumnType("bigint(20)").HasColumnName("size");

                b.Property<double?>("Speed").HasColumnType("double").HasColumnName("speed");

                b.Property<int>("Type").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("type").
                  HasDefaultValueSql("'0'");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<int>("Usage").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("usage").
                  HasDefaultValueSql("'0'");

                b.HasKey("Id");

                b.HasIndex("MachineId").HasDatabaseName("idx_memory_by_machine_machine");

                b.HasIndex("Size").HasDatabaseName("idx_memory_by_machine_size");

                b.HasIndex("Speed").HasDatabaseName("idx_memory_by_machine_speed");

                b.HasIndex("Type").HasDatabaseName("idx_memory_by_machine_type");

                b.HasIndex("Usage").HasDatabaseName("idx_memory_by_machine_usage");

                b.ToTable("memory_by_machine");
            });

            modelBuilder.Entity("Marechai.Database.Models.MemoryByOwnedMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<long>("OwnedMachineId").HasColumnType("bigint");

                b.Property<long>("Size").HasColumnType("bigint");

                b.Property<double>("Speed").HasColumnType("double");

                b.Property<int>("Type").HasColumnType("int");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<int>("Usage").HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("OwnedMachineId");

                b.HasIndex("Size");

                b.HasIndex("Speed");

                b.HasIndex("Type");

                b.HasIndex("Usage");

                b.ToTable("MemoryByOwnedMachine");
            });

            modelBuilder.Entity("Marechai.Database.Models.MoneyDonation", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<string>("Donator").IsRequired().ValueGeneratedOnAdd().HasColumnType("char(128)").
                  HasColumnName("donator").HasDefaultValueSql("''");

                b.Property<decimal>("Quantity").ValueGeneratedOnAdd().HasColumnType("decimal(11,2)").
                  HasColumnName("quantity").HasDefaultValueSql("'0.00'");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Donator").HasDatabaseName("idx_money_donations_donator");

                b.HasIndex("Quantity").HasDatabaseName("idx_money_donations_quantity");

                b.ToTable("money_donations");
            });

            modelBuilder.Entity("Marechai.Database.Models.News", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<int>("AddedId").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("added_id").
                  HasDefaultValueSql("'0'");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime>("Date").HasColumnType("datetime").HasColumnName("date");

                b.Property<int>("Type").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("type").
                  HasDefaultValueSql("'0'");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("AddedId").HasDatabaseName("idx_news_ip");

                b.HasIndex("Date").HasDatabaseName("idx_news_date");

                b.HasIndex("Type").HasDatabaseName("idx_news_type");

                b.ToTable("news");
            });

            modelBuilder.Entity("Marechai.Database.Models.OwnedMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("AcquisitionDate").HasColumnType("datetime(6)");

                b.Property<bool>("Boxed").HasColumnType("bit(1)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("LastStatusDate").HasColumnType("datetime(6)");

                b.Property<DateTime?>("LostDate").HasColumnType("datetime(6)");

                b.Property<int>("MachineId").HasColumnType("int(11)");

                b.Property<bool>("Manuals").HasColumnType("bit(1)");

                b.Property<string>("SerialNumber").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<bool>("SerialNumberVisible").ValueGeneratedOnAdd().HasColumnType("bit(1)").
                  HasDefaultValue(true);

                b.Property<int>("Status").HasColumnType("int");

                b.Property<bool>("Trade").HasColumnType("bit(1)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<string>("UserId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("AcquisitionDate");

                b.HasIndex("Boxed");

                b.HasIndex("LastStatusDate");

                b.HasIndex("LostDate");

                b.HasIndex("MachineId");

                b.HasIndex("Manuals");

                b.HasIndex("SerialNumber");

                b.HasIndex("SerialNumberVisible");

                b.HasIndex("Status");

                b.HasIndex("Trade");

                b.HasIndex("UserId");

                b.ToTable("OwnedMachines");
            });

            modelBuilder.Entity("Marechai.Database.Models.OwnedMachinePhoto", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("char(36)");

                b.Property<double?>("Aperture").HasColumnType("double");

                b.Property<string>("Author").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("CameraManufacturer").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("CameraModel").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("ColorSpace").HasColumnType("smallint unsigned");

                b.Property<string>("Comments").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("Contrast").HasColumnType("smallint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("CreationDate").HasColumnType("datetime(6)");

                b.Property<double?>("DigitalZoomRatio").HasColumnType("double");

                b.Property<string>("ExifVersion").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("ExposureMethod").HasColumnType("smallint unsigned");

                b.Property<ushort?>("ExposureProgram").HasColumnType("smallint unsigned");

                b.Property<double?>("ExposureTime").HasColumnType("double");

                b.Property<ushort?>("Flash").HasColumnType("smallint unsigned");

                b.Property<double?>("Focal").HasColumnType("double");

                b.Property<double?>("FocalLength").HasColumnType("double");

                b.Property<double?>("FocalLengthEquivalent").HasColumnType("double");

                b.Property<double?>("HorizontalResolution").HasColumnType("double");

                b.Property<ushort?>("IsoRating").HasColumnType("smallint unsigned");

                b.Property<string>("Lens").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<int>("LicenseId").HasColumnType("int");

                b.Property<ushort?>("LightSource").HasColumnType("smallint unsigned");

                b.Property<ushort?>("MeteringMode").HasColumnType("smallint unsigned");

                b.Property<ushort?>("Orientation").HasColumnType("smallint unsigned");

                b.Property<string>("OriginalExtension").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<long>("OwnedMachineId").HasColumnType("bigint");

                b.Property<ushort?>("ResolutionUnit").HasColumnType("smallint unsigned");

                b.Property<ushort?>("Saturation").HasColumnType("smallint unsigned");

                b.Property<ushort?>("SceneCaptureType").HasColumnType("smallint unsigned");

                b.Property<ushort?>("SensingMethod").HasColumnType("smallint unsigned");

                b.Property<ushort?>("Sharpness").HasColumnType("smallint unsigned");

                b.Property<string>("SoftwareUsed").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ushort?>("SubjectDistanceRange").HasColumnType("smallint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<DateTime>("UploadDate").IsConcurrencyToken().ValueGeneratedOnAddOrUpdate().
                  HasColumnType("datetime(6)");

                b.Property<string>("UserId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<double?>("VerticalResolution").HasColumnType("double");

                b.Property<ushort?>("WhiteBalance").HasColumnType("smallint unsigned");

                b.HasKey("Id");

                b.HasIndex("Aperture");

                b.HasIndex("Author");

                b.HasIndex("CameraManufacturer");

                b.HasIndex("CameraModel");

                b.HasIndex("ColorSpace");

                b.HasIndex("Comments");

                b.HasIndex("Contrast");

                b.HasIndex("CreationDate");

                b.HasIndex("DigitalZoomRatio");

                b.HasIndex("ExifVersion");

                b.HasIndex("ExposureMethod");

                b.HasIndex("ExposureProgram");

                b.HasIndex("ExposureTime");

                b.HasIndex("Flash");

                b.HasIndex("Focal");

                b.HasIndex("FocalLength");

                b.HasIndex("FocalLengthEquivalent");

                b.HasIndex("HorizontalResolution");

                b.HasIndex("IsoRating");

                b.HasIndex("Lens");

                b.HasIndex("LicenseId");

                b.HasIndex("LightSource");

                b.HasIndex("MeteringMode");

                b.HasIndex("Orientation");

                b.HasIndex("OwnedMachineId");

                b.HasIndex("ResolutionUnit");

                b.HasIndex("Saturation");

                b.HasIndex("SceneCaptureType");

                b.HasIndex("SensingMethod");

                b.HasIndex("Sharpness");

                b.HasIndex("SoftwareUsed");

                b.HasIndex("SubjectDistanceRange");

                b.HasIndex("UploadDate");

                b.HasIndex("UserId");

                b.HasIndex("VerticalResolution");

                b.HasIndex("WhiteBalance");

                b.ToTable("OwnedMachinePhotos");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleByBook", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<long>("BookId").HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("PersonId").HasColumnType("int");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("PersonId");

                b.HasIndex("RoleId");

                b.ToTable("PeopleByBooks");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleByCompany", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<int>("CompanyId").HasColumnType("int(11)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("End").HasColumnType("datetime(6)");

                b.Property<bool>("Ongoing").HasColumnType("bit(1)");

                b.Property<int>("PersonId").HasColumnType("int");

                b.Property<string>("Position").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime?>("Start").HasColumnType("datetime(6)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("CompanyId");

                b.HasIndex("End");

                b.HasIndex("PersonId");

                b.HasIndex("Position");

                b.HasIndex("Start");

                b.ToTable("PeopleByCompany");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleByDocument", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<long>("DocumentId").HasColumnType("bigint");

                b.Property<int>("PersonId").HasColumnType("int");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("DocumentId");

                b.HasIndex("PersonId");

                b.HasIndex("RoleId");

                b.ToTable("PeopleByDocuments");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleByMagazine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<long>("MagazineId").HasColumnType("bigint");

                b.Property<int>("PersonId").HasColumnType("int");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MagazineId");

                b.HasIndex("PersonId");

                b.HasIndex("RoleId");

                b.ToTable("PeopleByMagazines");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleBySoftwareFamily", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("PersonId").HasColumnType("int");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<ulong>("SoftwareFamilyId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("PersonId");

                b.HasIndex("RoleId");

                b.HasIndex("SoftwareFamilyId");

                b.ToTable("PeopleBySoftwareFamily");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("PersonId").HasColumnType("int");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("PersonId");

                b.HasIndex("RoleId");

                b.HasIndex("SoftwareVariantId");

                b.ToTable("PeopleBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleBySoftwareVersion", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("PersonId").HasColumnType("int");

                b.Property<string>("RoleId").IsRequired().HasColumnType("char(3)");

                b.Property<ulong>("SoftwareVersionId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("PersonId");

                b.HasIndex("RoleId");

                b.HasIndex("SoftwareVersionId");

                b.ToTable("PeopleBySoftwareVersion");
            });

            modelBuilder.Entity("Marechai.Database.Models.Person", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<string>("Alias").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("BirthDate").HasColumnType("datetime(6)");

                b.Property<short?>("CountryOfBirthId").HasColumnType("smallint(3)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("DeathDate").HasColumnType("datetime(6)");

                b.Property<string>("DisplayName").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<int?>("DocumentPersonId").HasColumnType("int");

                b.Property<string>("Facebook").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Name").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<Guid>("Photo").HasColumnType("char(36)");

                b.Property<string>("Surname").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Twitter").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<string>("Webpage").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("Alias");

                b.HasIndex("BirthDate");

                b.HasIndex("CountryOfBirthId");

                b.HasIndex("DeathDate");

                b.HasIndex("DisplayName");

                b.HasIndex("Facebook");

                b.HasIndex("Name");

                b.HasIndex("Photo");

                b.HasIndex("Surname");

                b.HasIndex("Twitter");

                b.HasIndex("Webpage");

                b.ToTable("People");
            });

            modelBuilder.Entity("Marechai.Database.Models.Processor", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<int?>("AddrBus").HasColumnType("int(11)").HasColumnName("addr_bus");

                b.Property<int?>("CompanyId").HasColumnType("int(11)").HasColumnName("company");

                b.Property<int?>("Cores").HasColumnType("int(11)").HasColumnName("cores");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int?>("DataBus").HasColumnType("int(11)").HasColumnName("data_bus");

                b.Property<float?>("DieSize").HasColumnType("float").HasColumnName("die_size");

                b.Property<int?>("FprSize").HasColumnType("int(11)").HasColumnName("FPR_size");

                b.Property<int?>("Fprs").HasColumnType("int(11)").HasColumnName("FPRs");

                b.Property<int?>("GprSize").HasColumnType("int(11)").HasColumnName("GPR_size");

                b.Property<int?>("Gprs").HasColumnType("int(11)").HasColumnName("GPRs");

                b.Property<int?>("InstructionSetId").HasColumnType("int(11)").HasColumnName("instruction_set");

                b.Property<DateTime?>("Introduced").HasColumnType("datetime").HasColumnName("introduced");

                b.Property<float?>("L1Data").HasColumnType("float").HasColumnName("L1_data");

                b.Property<float?>("L1Instruction").HasColumnType("float").HasColumnName("L1_instruction");

                b.Property<float?>("L2").HasColumnType("float");

                b.Property<float?>("L3").HasColumnType("float");

                b.Property<string>("ModelCode").HasMaxLength(45).HasColumnType("varchar(45)").
                  HasColumnName("model_code");

                b.Property<string>("Name").IsRequired().ValueGeneratedOnAdd().HasMaxLength(50).
                  HasColumnType("char(50)").HasColumnName("name").HasDefaultValueSql("''");

                b.Property<string>("Package").HasMaxLength(45).HasColumnType("varchar(45)").HasColumnName("package");

                b.Property<string>("Process").HasMaxLength(45).HasColumnType("varchar(45)").HasColumnName("process");

                b.Property<float?>("ProcessNm").HasColumnType("float").HasColumnName("process_nm");

                b.Property<int?>("SimdRegisters").HasColumnType("int(11)").HasColumnName("SIMD_registers");

                b.Property<int?>("SimdSize").HasColumnType("int(11)").HasColumnName("SIMD_size");

                b.Property<double?>("Speed").HasColumnType("double").HasColumnName("speed");

                b.Property<int?>("ThreadsPerCore").HasColumnType("int(11)").HasColumnName("threads_per_core");

                b.Property<long?>("Transistors").HasColumnType("bigint(20)").HasColumnName("transistors");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("AddrBus").HasDatabaseName("idx_processors_addr_bus");

                b.HasIndex("CompanyId").HasDatabaseName("idx_processors_company");

                b.HasIndex("Cores").HasDatabaseName("idx_processors_cores");

                b.HasIndex("DataBus").HasDatabaseName("idx_processors_data_bus");

                b.HasIndex("DieSize").HasDatabaseName("idx_processors_die_size");

                b.HasIndex("FprSize").HasDatabaseName("idx_processors_FPR_size");

                b.HasIndex("Fprs").HasDatabaseName("idx_processors_FPRs");

                b.HasIndex("GprSize").HasDatabaseName("idx_processors_GPR_size");

                b.HasIndex("Gprs").HasDatabaseName("idx_processors_GPRs");

                b.HasIndex("InstructionSetId").HasDatabaseName("idx_processors_instruction_set");

                b.HasIndex("Introduced").HasDatabaseName("idx_processors_introduced");

                b.HasIndex("L1Data").HasDatabaseName("idx_processors_L1_data");

                b.HasIndex("L1Instruction").HasDatabaseName("idx_processors_L1_instruction");

                b.HasIndex("L2").HasDatabaseName("idx_processors_L2");

                b.HasIndex("L3").HasDatabaseName("idx_processors_L3");

                b.HasIndex("ModelCode").HasDatabaseName("idx_processors_model_code");

                b.HasIndex("Name").HasDatabaseName("idx_processors_name");

                b.HasIndex("Package").HasDatabaseName("idx_processors_package");

                b.HasIndex("Process").HasDatabaseName("idx_processors_process");

                b.HasIndex("ProcessNm").HasDatabaseName("idx_processors_process_nm");

                b.HasIndex("SimdRegisters").HasDatabaseName("idx_processors_SIMD_registers");

                b.HasIndex("SimdSize").HasDatabaseName("idx_processors_SIMD_size");

                b.HasIndex("Speed").HasDatabaseName("idx_processors_speed");

                b.HasIndex("ThreadsPerCore").HasDatabaseName("idx_processors_threads_per_core");

                b.HasIndex("Transistors").HasDatabaseName("idx_processors_transistors");

                b.ToTable("processors");
            });

            modelBuilder.Entity("Marechai.Database.Models.ProcessorsByMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint(20)").HasColumnName("id");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("MachineId").HasColumnType("int(11)").HasColumnName("machine");

                b.Property<int>("ProcessorId").HasColumnType("int(11)").HasColumnName("processor");

                b.Property<float?>("Speed").HasColumnType("float").HasColumnName("speed");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MachineId").HasDatabaseName("idx_processors_by_machine_machine");

                b.HasIndex("ProcessorId").HasDatabaseName("idx_processors_by_machine_processor");

                b.HasIndex("Speed").HasDatabaseName("idx_processors_by_machine_speed");

                b.ToTable("processors_by_machine");
            });

            modelBuilder.Entity("Marechai.Database.Models.ProcessorsByOwnedMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<long>("OwnedMachineId").HasColumnType("bigint");

                b.Property<int>("ProcessorId").HasColumnType("int(11)");

                b.Property<float>("Speed").HasColumnType("float");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("OwnedMachineId");

                b.HasIndex("ProcessorId");

                b.HasIndex("Speed");

                b.ToTable("ProcessorsByOwnedMachine");
            });

            modelBuilder.Entity("Marechai.Database.Models.ProcessorsBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<bool?>("Minimum").HasColumnType("bit(1)");

                b.Property<int>("ProcessorId").HasColumnType("int(11)");

                b.Property<bool?>("Recommended").HasColumnType("bit(1)");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<float?>("Speed").HasColumnType("float");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Minimum");

                b.HasIndex("ProcessorId");

                b.HasIndex("Recommended");

                b.HasIndex("SoftwareVariantId");

                b.HasIndex("Speed");

                b.ToTable("ProcessorsBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.RequiredOperatingSystemsBySofwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("OperatingSystemId").HasColumnType("bigint unsigned");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("OperatingSystemId");

                b.HasIndex("SoftwareVariantId");

                b.ToTable("RequiredOperatingSystemsBySofwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.RequiredSoftwareBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<ulong>("SoftwareVersionId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("SoftwareVariantId");

                b.HasIndex("SoftwareVersionId");

                b.ToTable("RequiredSoftwareBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.Resolution", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<sbyte>("Chars").ValueGeneratedOnAdd().HasColumnType("tinyint(1)").HasColumnName("chars").
                  HasDefaultValueSql("'0'");

                b.Property<long?>("Colors").HasColumnType("bigint(20)").HasColumnName("colors");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<bool>("Grayscale").HasColumnType("bit(1)");

                b.Property<int>("Height").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("height").
                  HasDefaultValueSql("'0'");

                b.Property<long?>("Palette").HasColumnType("bigint(20)").HasColumnName("palette");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<int>("Width").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("width").
                  HasDefaultValueSql("'0'");

                b.HasKey("Id");

                b.HasIndex("Colors").HasDatabaseName("idx_resolutions_colors");

                b.HasIndex("Height").HasDatabaseName("idx_resolutions_height");

                b.HasIndex("Palette").HasDatabaseName("idx_resolutions_palette");

                b.HasIndex("Width").HasDatabaseName("idx_resolutions_width");

                b.HasIndex("Width", "Height").HasDatabaseName("idx_resolutions_resolution");

                b.HasIndex("Width", "Height", "Colors").HasDatabaseName("idx_resolutions_resolution_with_color");

                b.HasIndex("Width", "Height", "Colors", "Palette").
                  HasDatabaseName("idx_resolutions_resolution_with_color_and_palette");

                b.ToTable("resolutions");
            });

            modelBuilder.Entity("Marechai.Database.Models.ResolutionsByGpu", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint(20)").HasColumnName("id");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("GpuId").HasColumnType("int(11)").HasColumnName("gpu");

                b.Property<int>("ResolutionId").HasColumnType("int(11)").HasColumnName("resolution");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("GpuId").HasDatabaseName("idx_resolutions_by_gpu_gpu");

                b.HasIndex("ResolutionId").HasDatabaseName("idx_resolutions_by_gpu_resolution");

                b.ToTable("resolutions_by_gpu");
            });

            modelBuilder.Entity("Marechai.Database.Models.ResolutionsByScreen", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("ResolutionId").HasColumnType("int(11)");

                b.Property<int>("ScreenId").HasColumnType("int");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("ResolutionId");

                b.HasIndex("ScreenId");

                b.ToTable("ResolutionsByScreen");
            });

            modelBuilder.Entity("Marechai.Database.Models.Screen", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<double>("Diagonal").HasColumnType("double");

                b.Property<long?>("EffectiveColors").HasColumnType("bigint");

                b.Property<double?>("Height").HasColumnType("double");

                b.Property<int>("NativeResolutionId").HasColumnType("int(11)");

                b.Property<string>("Type").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<double?>("Width").HasColumnType("double");

                b.HasKey("Id");

                b.HasIndex("Diagonal");

                b.HasIndex("EffectiveColors");

                b.HasIndex("Height");

                b.HasIndex("NativeResolutionId");

                b.HasIndex("Type");

                b.HasIndex("Width");

                b.ToTable("Screens");
            });

            modelBuilder.Entity("Marechai.Database.Models.ScreensByMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("MachineId").HasColumnType("int(11)");

                b.Property<int>("ScreenId").HasColumnType("int");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MachineId");

                b.HasIndex("ScreenId");

                b.ToTable("ScreensByMachine");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareFamily", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("Introduced").HasColumnType("datetime(6)");

                b.Property<string>("Name").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ulong?>("ParentId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Introduced");

                b.HasIndex("Name");

                b.HasIndex("ParentId");

                b.ToTable("SoftwareFamilies");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<string>("CatalogueNumber").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<uint>("DistributionMode").HasColumnType("int unsigned");

                b.Property<DateTime?>("Introduced").HasColumnType("datetime(6)");

                b.Property<ulong?>("MinimumMemory").HasColumnType("bigint unsigned");

                b.Property<string>("Name").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ulong?>("ParentId").HasColumnType("bigint unsigned");

                b.Property<string>("PartNumber").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("ProductCode").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ulong?>("RecommendedMemory").HasColumnType("bigint unsigned");

                b.Property<ulong?>("RequiredStorage").HasColumnType("bigint unsigned");

                b.Property<string>("SerialNumber").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ulong>("SoftwareVersionId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<string>("Version").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("CatalogueNumber");

                b.HasIndex("DistributionMode");

                b.HasIndex("Introduced");

                b.HasIndex("MinimumMemory");

                b.HasIndex("Name");

                b.HasIndex("ParentId");

                b.HasIndex("PartNumber");

                b.HasIndex("ProductCode");

                b.HasIndex("RecommendedMemory");

                b.HasIndex("RequiredStorage");

                b.HasIndex("SerialNumber");

                b.HasIndex("SoftwareVersionId");

                b.HasIndex("Version");

                b.ToTable("SoftwareVariants");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareVariantByCompilationMedia", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("MediaId").HasColumnType("bigint unsigned");

                b.Property<string>("Path").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("PathSeparator").IsRequired().HasColumnType("varchar(1) CHARACTER SET utf8mb4");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MediaId");

                b.HasIndex("Path");

                b.HasIndex("SoftwareVariantId");

                b.ToTable("SoftwareVariantByCompilationMedia");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareVersion", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<string>("Codename").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("FamilyId").HasColumnType("bigint unsigned");

                b.Property<DateTime?>("Introduced").HasColumnType("datetime(6)");

                b.Property<int?>("LicenseId").HasColumnType("int");

                b.Property<string>("Name").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<ulong?>("PreviousId").HasColumnType("bigint unsigned");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<string>("Version").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("Codename");

                b.HasIndex("FamilyId");

                b.HasIndex("Introduced");

                b.HasIndex("LicenseId");

                b.HasIndex("Name");

                b.HasIndex("PreviousId").IsUnique();

                b.HasIndex("Version");

                b.ToTable("SoftwareVersion");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoundByMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint(20)").HasColumnName("id");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("MachineId").HasColumnType("int(11)").HasColumnName("machine");

                b.Property<int>("SoundSynthId").HasColumnType("int(11)").HasColumnName("sound_synth");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MachineId").HasDatabaseName("idx_sound_by_machine_machine");

                b.HasIndex("SoundSynthId").HasDatabaseName("idx_sound_by_machine_sound_synth");

                b.ToTable("sound_by_machine");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoundByOwnedMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<long>("OwnedMachineId").HasColumnType("bigint");

                b.Property<int>("SoundSynthId").HasColumnType("int(11)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("OwnedMachineId");

                b.HasIndex("SoundSynthId");

                b.ToTable("SoundByOwnedMachine");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoundBySoftwareVariant", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<int>("SoundSynthId").HasColumnType("int(11)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("SoftwareVariantId");

                b.HasIndex("SoundSynthId");

                b.ToTable("SoundBySoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoundSynth", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("id");

                b.Property<int?>("CompanyId").HasColumnType("int(11)").HasColumnName("company");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int?>("Depth").HasColumnType("int(11)").HasColumnName("depth");

                b.Property<double?>("Frequency").HasColumnType("double").HasColumnName("frequency");

                b.Property<DateTime?>("Introduced").HasColumnType("datetime").HasColumnName("introduced");

                b.Property<string>("ModelCode").HasMaxLength(45).HasColumnType("varchar(45)").
                  HasColumnName("model_code");

                b.Property<string>("Name").IsRequired().ValueGeneratedOnAdd().HasMaxLength(50).
                  HasColumnType("char(50)").HasColumnName("name").HasDefaultValueSql("''");

                b.Property<int?>("SquareWave").HasColumnType("int(11)").HasColumnName("square_wave");

                b.Property<int?>("Type").HasColumnType("int(11)").HasColumnName("type");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<int?>("Voices").HasColumnType("int(11)").HasColumnName("voices");

                b.Property<int?>("WhiteNoise").HasColumnType("int(11)").HasColumnName("white_noise");

                b.HasKey("Id");

                b.HasIndex("CompanyId").HasDatabaseName("idx_sound_synths_company");

                b.HasIndex("Depth").HasDatabaseName("idx_sound_synths_depth");

                b.HasIndex("Frequency").HasDatabaseName("idx_sound_synths_frequency");

                b.HasIndex("Introduced").HasDatabaseName("idx_sound_synths_introduced");

                b.HasIndex("ModelCode").HasDatabaseName("idx_sound_synths_model_code");

                b.HasIndex("Name").HasDatabaseName("idx_sound_synths_name");

                b.HasIndex("SquareWave").HasDatabaseName("idx_sound_synths_square_wave");

                b.HasIndex("Type").HasDatabaseName("idx_sound_synths_type");

                b.HasIndex("Voices").HasDatabaseName("idx_sound_synths_voices");

                b.HasIndex("WhiteNoise").HasDatabaseName("idx_sound_synths_white_noise");

                b.ToTable("sound_synths");
            });

            modelBuilder.Entity("Marechai.Database.Models.StandaloneFile", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd().HasColumnType("bigint unsigned");

                b.Property<DateTime?>("AccessDate").HasColumnType("datetime(6)");

                b.Property<ulong>("Attributes").HasColumnType("bigint unsigned");

                b.Property<DateTime?>("BackupDate").HasColumnType("datetime(6)");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<DateTime?>("CreationDate").HasColumnType("datetime(6)");

                b.Property<uint?>("DeviceNumber").HasColumnType("int unsigned");

                b.Property<ulong?>("GroupId").HasColumnType("bigint unsigned");

                b.Property<ulong?>("Inode").HasColumnType("bigint unsigned");

                b.Property<bool>("IsDirectory").HasColumnType("bit(1)");

                b.Property<DateTime?>("LastWriteDate").HasColumnType("datetime(6)");

                b.Property<ulong?>("Links").HasColumnType("bigint unsigned");

                b.Property<string>("Name").IsRequired().HasMaxLength(255).
                  HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Path").IsRequired().HasMaxLength(8192).
                  HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("PathSeparator").IsRequired().HasColumnType("varchar(1) CHARACTER SET utf8mb4");

                b.Property<ushort?>("PosixMode").HasColumnType("smallint unsigned");

                b.Property<ulong>("SoftwareVariantId").HasColumnType("bigint unsigned");

                b.Property<DateTime?>("StatusChangeDate").HasColumnType("datetime(6)");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.Property<ulong?>("UserId").HasColumnType("bigint unsigned");

                b.HasKey("Id");

                b.HasIndex("AccessDate");

                b.HasIndex("BackupDate");

                b.HasIndex("CreationDate");

                b.HasIndex("GroupId");

                b.HasIndex("IsDirectory");

                b.HasIndex("LastWriteDate");

                b.HasIndex("Name");

                b.HasIndex("Path");

                b.HasIndex("SoftwareVariantId");

                b.HasIndex("StatusChangeDate");

                b.HasIndex("UserId");

                b.ToTable("StandaloneFiles");
            });

            modelBuilder.Entity("Marechai.Database.Models.StorageByMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint(20)").HasColumnName("id");

                b.Property<long?>("Capacity").HasColumnType("bigint(20)").HasColumnName("capacity");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("Interface").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("interface").
                  HasDefaultValueSql("'0'");

                b.Property<int>("MachineId").HasColumnType("int(11)").HasColumnName("machine");

                b.Property<int>("Type").ValueGeneratedOnAdd().HasColumnType("int(11)").HasColumnName("type").
                  HasDefaultValueSql("'0'");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Capacity").HasDatabaseName("idx_storage_capacity");

                b.HasIndex("Interface").HasDatabaseName("idx_storage_interface");

                b.HasIndex("MachineId").HasDatabaseName("idx_storage_machine");

                b.HasIndex("Type").HasDatabaseName("idx_storage_type");

                b.ToTable("storage_by_machine");
            });

            modelBuilder.Entity("Marechai.Database.Models.StorageByOwnedMachine", b =>
            {
                b.Property<long>("Id").ValueGeneratedOnAdd().HasColumnType("bigint");

                b.Property<long>("Capacity").HasColumnType("bigint");

                b.Property<DateTime>("CreatedOn").ValueGeneratedOnAdd().HasColumnType("datetime(6)");

                b.Property<int>("Interface").HasColumnType("int");

                b.Property<long>("OwnedMachineId").HasColumnType("bigint");

                b.Property<int>("Type").HasColumnType("int");

                b.Property<DateTime>("UpdatedOn").ValueGeneratedOnAddOrUpdate().HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("Capacity");

                b.HasIndex("Interface");

                b.HasIndex("OwnedMachineId");

                b.HasIndex("Type");

                b.ToTable("StorageByOwnedMachine");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<string>("ClaimType").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("ClaimValue").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("RoleId").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<string>("ClaimType").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("ClaimValue").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("UserId").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("ProviderKey").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("ProviderDisplayName").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("UserId").IsRequired().HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("RoleId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("LoginProvider").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Name").HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Value").HasColumnType("longtext CHARACTER SET utf8mb4");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("Marechai.Database.Models.Audit", b =>
            {
                b.HasOne("Marechai.Database.Models.ApplicationUser", "User").WithMany().HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("User");
            });

            modelBuilder.Entity("Marechai.Database.Models.Book", b =>
            {
                b.HasOne("Marechai.Database.Models.Iso31661Numeric", "Country").WithMany("Books").
                  HasForeignKey("CountryId");

                b.HasOne("Marechai.Database.Models.Book", "Previous").WithOne("Next").
                  HasForeignKey("Marechai.Database.Models.Book", "PreviousId");

                b.HasOne("Marechai.Database.Models.Book", "Source").WithMany("Derivates").HasForeignKey("SourceId");

                b.Navigation("Country");

                b.Navigation("Previous");

                b.Navigation("Source");
            });

            modelBuilder.Entity("Marechai.Database.Models.BookScan", b =>
            {
                b.HasOne("Marechai.Database.Models.Book", "Book").WithMany("Scans").HasForeignKey("BookId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.ApplicationUser", "User").WithMany("BookScans").
                  HasForeignKey("UserId").OnDelete(DeleteBehavior.SetNull);

                b.Navigation("Book");

                b.Navigation("User");
            });

            modelBuilder.Entity("Marechai.Database.Models.BooksByMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Book", "Book").WithMany("Machines").HasForeignKey("BookId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Books").HasForeignKey("MachineId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Book");

                b.Navigation("Machine");
            });

            modelBuilder.Entity("Marechai.Database.Models.BooksByMachineFamily", b =>
            {
                b.HasOne("Marechai.Database.Models.Book", "Book").WithMany("MachineFamilies").HasForeignKey("BookId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.MachineFamily", "MachineFamily").WithMany("Books").
                  HasForeignKey("MachineFamilyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Book");

                b.Navigation("MachineFamily");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesByBook", b =>
            {
                b.HasOne("Marechai.Database.Models.Book", "Book").WithMany("Companies").HasForeignKey("BookId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentCompany", "Company").WithMany("Books").
                  HasForeignKey("CompanyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Book");

                b.Navigation("Company");

                b.Navigation("Role");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesByDocument", b =>
            {
                b.HasOne("Marechai.Database.Models.DocumentCompany", "Company").WithMany("Documents").
                  HasForeignKey("CompanyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Document", "Document").WithMany("Companies").
                  HasForeignKey("DocumentId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Company");

                b.Navigation("Document");

                b.Navigation("Role");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesByMagazine", b =>
            {
                b.HasOne("Marechai.Database.Models.DocumentCompany", "Company").WithMany("Magazines").
                  HasForeignKey("CompanyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Magazine", "Magazine").WithMany("Companies").
                  HasForeignKey("MagazineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Company");

                b.Navigation("Magazine");

                b.Navigation("Role");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesBySoftwareFamily", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("SoftwareFamilies").
                  HasForeignKey("CompanyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareFamily", "SoftwareFamily").WithMany("Companies").
                  HasForeignKey("SoftwareFamilyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Company");

                b.Navigation("Role");

                b.Navigation("SoftwareFamily");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("SoftwareVariants").
                  HasForeignKey("CompanyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("Companies").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Company");

                b.Navigation("Role");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompaniesBySoftwareVersion", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("SoftwareVersions").
                  HasForeignKey("CompanyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVersion", "SoftwareVersion").WithMany("Companies").
                  HasForeignKey("SoftwareVersionId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Company");

                b.Navigation("Role");

                b.Navigation("SoftwareVersion");
            });

            modelBuilder.Entity("Marechai.Database.Models.Company", b =>
            {
                b.HasOne("Marechai.Database.Models.Iso31661Numeric", "Country").WithMany("Companies").
                  HasForeignKey("CountryId").HasConstraintName("fk_companies_country");

                b.HasOne("Marechai.Database.Models.Company", "SoldTo").WithMany("InverseSoldToNavigation").
                  HasForeignKey("SoldToId").HasConstraintName("fk_companies_sold_to");

                b.Navigation("Country");

                b.Navigation("SoldTo");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompanyDescription", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("Descriptions").
                  HasForeignKey("CompanyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Company");
            });

            modelBuilder.Entity("Marechai.Database.Models.CompanyLogo", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("Logos").HasForeignKey("CompanyId").
                  HasConstraintName("fk_company_logos_company1").IsRequired();

                b.Navigation("Company");
            });

            modelBuilder.Entity("Marechai.Database.Models.CurrencyInflation", b =>
            {
                b.HasOne("Marechai.Database.Models.Iso4217", "Currency").WithMany().HasForeignKey("CurrencyCode").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Currency");
            });

            modelBuilder.Entity("Marechai.Database.Models.CurrencyPegging", b =>
            {
                b.HasOne("Marechai.Database.Models.Iso4217", "Destination").WithMany().HasForeignKey("DestinationCode").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Iso4217", "Source").WithMany().HasForeignKey("SourceCode").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Destination");

                b.Navigation("Source");
            });

            modelBuilder.Entity("Marechai.Database.Models.Document", b =>
            {
                b.HasOne("Marechai.Database.Models.Iso31661Numeric", "Country").WithMany("Documents").
                  HasForeignKey("CountryId");

                b.Navigation("Country");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentCompany", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithOne("DocumentCompany").
                  HasForeignKey("Marechai.Database.Models.DocumentCompany", "CompanyId").
                  OnDelete(DeleteBehavior.SetNull);

                b.Navigation("Company");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentPerson", b =>
            {
                b.HasOne("Marechai.Database.Models.Person", "Person").WithOne("DocumentPerson").
                  HasForeignKey("Marechai.Database.Models.DocumentPerson", "PersonId").OnDelete(DeleteBehavior.SetNull);

                b.Navigation("Person");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentScan", b =>
            {
                b.HasOne("Marechai.Database.Models.Document", "Document").WithMany("Scans").HasForeignKey("DocumentId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.ApplicationUser", "User").WithMany("DocumentScans").
                  HasForeignKey("UserId").OnDelete(DeleteBehavior.SetNull);

                b.Navigation("Document");

                b.Navigation("User");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentsByMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Document", "Document").WithMany("Machines").
                  HasForeignKey("DocumentId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Documents").
                  HasForeignKey("MachineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Document");

                b.Navigation("Machine");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentsByMachineFamily", b =>
            {
                b.HasOne("Marechai.Database.Models.Document", "Document").WithMany("MachineFamilies").
                  HasForeignKey("DocumentId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.MachineFamily", "MachineFamily").WithMany("Documents").
                  HasForeignKey("MachineFamilyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Document");

                b.Navigation("MachineFamily");
            });

            modelBuilder.Entity("Marechai.Database.Models.Dump", b =>
            {
                b.HasOne("Marechai.Database.Models.MediaDump", "MediaDump").WithMany("Dumps").
                  HasForeignKey("MediaDumpId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Media", "Media").WithMany("Dumps").HasForeignKey("MediaId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.ApplicationUser", "User").WithMany("Dumps").HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.SetNull);

                b.Navigation("Media");

                b.Navigation("MediaDump");

                b.Navigation("User");
            });

            modelBuilder.Entity("Marechai.Database.Models.DumpHardware", b =>
            {
                b.HasOne("Marechai.Database.Models.Dump", "Dump").WithMany("DumpHardware").HasForeignKey("DumpId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Dump");
            });

            modelBuilder.Entity("Marechai.Database.Models.FileDataStream", b =>
            {
                b.HasOne("Marechai.Database.Models.DbFile", "File").WithMany().HasForeignKey("FileId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("File");
            });

            modelBuilder.Entity("Marechai.Database.Models.FileDataStreamsByMediaFile", b =>
            {
                b.HasOne("Marechai.Database.Models.FileDataStream", "FileDataStream").WithMany().
                  HasForeignKey("FileDataStreamId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.MediaFile", "MediaFile").WithMany("DataStreams").
                  HasForeignKey("MediaFileId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("FileDataStream");

                b.Navigation("MediaFile");
            });

            modelBuilder.Entity("Marechai.Database.Models.FileDataStreamsByStandaloneFile", b =>
            {
                b.HasOne("Marechai.Database.Models.FileDataStream", "FileDataStream").WithMany().
                  HasForeignKey("FileDataStreamId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.StandaloneFile", "StandaloneFile").WithMany("DataStreams").
                  HasForeignKey("StandaloneFileId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("FileDataStream");

                b.Navigation("StandaloneFile");
            });

            modelBuilder.Entity("Marechai.Database.Models.FilesByFilesystem", b =>
            {
                b.HasOne("Marechai.Database.Models.MediaFile", "File").WithMany().HasForeignKey("FileId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Filesystem", "Filesystem").WithMany("Files").
                  HasForeignKey("FilesystemId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("File");

                b.Navigation("Filesystem");
            });

            modelBuilder.Entity("Marechai.Database.Models.FilesystemsByLogicalPartition", b =>
            {
                b.HasOne("Marechai.Database.Models.Filesystem", "Filesystem").WithMany("Partitions").
                  HasForeignKey("FilesystemId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.LogicalPartition", "Partition").WithMany("Filesystems").
                  HasForeignKey("PartitionId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Filesystem");

                b.Navigation("Partition");
            });

            modelBuilder.Entity("Marechai.Database.Models.FilesystemsByMediaDumpFile", b =>
            {
                b.HasOne("Marechai.Database.Models.Filesystem", "Filesystem").WithMany("MediaDumpFileImages").
                  HasForeignKey("FilesystemId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.MediaDumpFileImage", "MediaDumpFileImage").WithMany("Filesystems").
                  HasForeignKey("MediaDumpFileImageId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Filesystem");

                b.Navigation("MediaDumpFileImage");
            });

            modelBuilder.Entity("Marechai.Database.Models.Gpu", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("Gpus").HasForeignKey("CompanyId").
                  HasConstraintName("fk_gpus_company");

                b.Navigation("Company");
            });

            modelBuilder.Entity("Marechai.Database.Models.GpusByMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Gpu", "Gpu").WithMany("GpusByMachine").HasForeignKey("GpuId").
                  HasConstraintName("fk_gpus_by_machine_gpu").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Gpus").HasForeignKey("MachineId").
                  HasConstraintName("fk_gpus_by_machine_machine").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Gpu");

                b.Navigation("Machine");
            });

            modelBuilder.Entity("Marechai.Database.Models.GpusByOwnedMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Gpu", "Gpu").WithMany().HasForeignKey("GpuId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.OwnedMachine", "OwnedMachine").WithMany("Gpus").
                  HasForeignKey("OwnedMachineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Gpu");

                b.Navigation("OwnedMachine");
            });

            modelBuilder.Entity("Marechai.Database.Models.GpusBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.Gpu", "Gpu").WithMany("Software").HasForeignKey("GpuId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("Gpus").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Gpu");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.InstructionSetExtensionsByProcessor", b =>
            {
                b.HasOne("Marechai.Database.Models.InstructionSetExtension", "Extension").
                  WithMany("InstructionSetExtensionsByProcessor").HasForeignKey("ExtensionId").
                  HasConstraintName("fk_extension_extension_id").IsRequired();

                b.HasOne("Marechai.Database.Models.Processor", "Processor").WithMany("InstructionSetExtensions").
                  HasForeignKey("ProcessorId").HasConstraintName("fk_extension_processor_id").IsRequired();

                b.Navigation("Extension");

                b.Navigation("Processor");
            });

            modelBuilder.Entity("Marechai.Database.Models.InstructionSetsBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.InstructionSet", "InstructionSet").WithMany("Software").
                  HasForeignKey("InstructionSetId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("Architectures").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("InstructionSet");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.LanguagesBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.Iso639", "Language").WithMany("Software").
                  HasForeignKey("LanguageId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("Languages").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Language");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.LogicalPartitionsByMedia", b =>
            {
                b.HasOne("Marechai.Database.Models.Media", "Media").WithMany("LogicalPartitions").
                  HasForeignKey("MediaId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.LogicalPartition", "Partition").WithMany("Media").
                  HasForeignKey("PartitionId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Media");

                b.Navigation("Partition");
            });

            modelBuilder.Entity("Marechai.Database.Models.Machine", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("Machines").HasForeignKey("CompanyId").
                  HasConstraintName("fk_machines_company").IsRequired();

                b.HasOne("Marechai.Database.Models.MachineFamily", "Family").WithMany("Machines").
                  HasForeignKey("FamilyId").HasConstraintName("fk_machines_family");

                b.Navigation("Company");

                b.Navigation("Family");
            });

            modelBuilder.Entity("Marechai.Database.Models.MachineFamiliesBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.MachineFamily", "MachineFamily").WithMany("Software").
                  HasForeignKey("MachineFamilyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("MachineFamilies").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("MachineFamily");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.MachineFamily", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("MachineFamilies").
                  HasForeignKey("CompanyId").HasConstraintName("fk_machine_families_company").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Company");
            });

            modelBuilder.Entity("Marechai.Database.Models.MachinePhoto", b =>
            {
                b.HasOne("Marechai.Database.Models.License", "License").WithMany("Photos").HasForeignKey("LicenseId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Photos").HasForeignKey("MachineId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.ApplicationUser", "User").WithMany("Photos").HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.SetNull);

                b.Navigation("License");

                b.Navigation("Machine");

                b.Navigation("User");
            });

            modelBuilder.Entity("Marechai.Database.Models.MachinesBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Software").HasForeignKey("MachineId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("Machines").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Machine");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.Magazine", b =>
            {
                b.HasOne("Marechai.Database.Models.Iso31661Numeric", "Country").WithMany("Magazines").
                  HasForeignKey("CountryId");

                b.Navigation("Country");
            });

            modelBuilder.Entity("Marechai.Database.Models.MagazineIssue", b =>
            {
                b.HasOne("Marechai.Database.Models.Magazine", "Magazine").WithMany("Issues").
                  HasForeignKey("MagazineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Magazine");
            });

            modelBuilder.Entity("Marechai.Database.Models.MagazineScan", b =>
            {
                b.HasOne("Marechai.Database.Models.MagazineIssue", "Magazine").WithMany("Scans").
                  HasForeignKey("MagazineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.ApplicationUser", "User").WithMany("MagazineScans").
                  HasForeignKey("UserId").OnDelete(DeleteBehavior.SetNull);

                b.Navigation("Magazine");

                b.Navigation("User");
            });

            modelBuilder.Entity("Marechai.Database.Models.MagazinesByMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Magazines").
                  HasForeignKey("MachineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.MagazineIssue", "Magazine").WithMany("Machines").
                  HasForeignKey("MagazineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Machine");

                b.Navigation("Magazine");
            });

            modelBuilder.Entity("Marechai.Database.Models.MagazinesByMachineFamily", b =>
            {
                b.HasOne("Marechai.Database.Models.MachineFamily", "MachineFamily").WithMany("Magazines").
                  HasForeignKey("MachineFamilyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.MagazineIssue", "Magazine").WithMany("MachineFamilies").
                  HasForeignKey("MagazineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("MachineFamily");

                b.Navigation("Magazine");
            });

            modelBuilder.Entity("Marechai.Database.Models.MasteringText", b =>
            {
                b.HasOne("Marechai.Database.Models.Media", "Media").WithMany("MasteringTexts").HasForeignKey("MediaId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Media");
            });

            modelBuilder.Entity("Marechai.Database.Models.Media", b =>
            {
                b.HasOne("Marechai.Database.Models.MagazineIssue", "MagazineIssue").WithMany("Coverdiscs").
                  HasForeignKey("MagazineIssueId").OnDelete(DeleteBehavior.SetNull);

                b.Navigation("MagazineIssue");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.Media", "Media").WithMany("Software").HasForeignKey("MediaId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("Media").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Media");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDump", b =>
            {
                b.HasOne("Marechai.Database.Models.Media", "Media").WithMany("MediaDumps").HasForeignKey("MediaId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Media");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDumpFileImage", b =>
            {
                b.HasOne("Marechai.Database.Models.MediaDump", "MediaDump").WithMany("Files").
                  HasForeignKey("MediaDumpId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("MediaDump");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDumpImage", b =>
            {
                b.HasOne("Marechai.Database.Models.MediaDump", "MediaDump").WithOne("Image").
                  HasForeignKey("Marechai.Database.Models.MediaDumpImage", "MediaDumpId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("MediaDump");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDumpSubchannelImage", b =>
            {
                b.HasOne("Marechai.Database.Models.MediaDump", "MediaDump").WithOne("Subchannel").
                  HasForeignKey("Marechai.Database.Models.MediaDumpSubchannelImage", "MediaDumpId").
                  OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Marechai.Database.Models.MediaDumpTrackImage", "Track").WithOne("Subchannel").
                  HasForeignKey("Marechai.Database.Models.MediaDumpSubchannelImage", "TrackId").
                  OnDelete(DeleteBehavior.Cascade);

                b.Navigation("MediaDump");

                b.Navigation("Track");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDumpTrackImage", b =>
            {
                b.HasOne("Marechai.Database.Models.MediaDump", "MediaDump").WithMany("Tracks").
                  HasForeignKey("MediaDumpId").OnDelete(DeleteBehavior.Cascade);

                b.Navigation("MediaDump");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaTagDump", b =>
            {
                b.HasOne("Marechai.Database.Models.DbFile", "File").WithMany().HasForeignKey("FileId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.MediaDump", "MediaDump").WithMany("Tags").
                  HasForeignKey("MediaDumpId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("File");

                b.Navigation("MediaDump");
            });

            modelBuilder.Entity("Marechai.Database.Models.MemoryByMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Memory").HasForeignKey("MachineId").
                  HasConstraintName("fk_memory_by_machine_machine").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Machine");
            });

            modelBuilder.Entity("Marechai.Database.Models.MemoryByOwnedMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.OwnedMachine", "OwnedMachine").WithMany("Memory").
                  HasForeignKey("OwnedMachineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("OwnedMachine");
            });

            modelBuilder.Entity("Marechai.Database.Models.OwnedMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany().HasForeignKey("MachineId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.ApplicationUser", "User").WithMany("OwnedMachines").
                  HasForeignKey("UserId").OnDelete(DeleteBehavior.Cascade);

                b.Navigation("Machine");

                b.Navigation("User");
            });

            modelBuilder.Entity("Marechai.Database.Models.OwnedMachinePhoto", b =>
            {
                b.HasOne("Marechai.Database.Models.License", "License").WithMany("OwnedMachinePhotos").
                  HasForeignKey("LicenseId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.OwnedMachine", "OwnedMachine").WithMany("Photos").
                  HasForeignKey("OwnedMachineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.ApplicationUser", "User").WithMany("OwnedMachinePhotos").
                  HasForeignKey("UserId").OnDelete(DeleteBehavior.Cascade);

                b.Navigation("License");

                b.Navigation("OwnedMachine");

                b.Navigation("User");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleByBook", b =>
            {
                b.HasOne("Marechai.Database.Models.Book", "Book").WithMany("People").HasForeignKey("BookId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentPerson", "Person").WithMany("Books").
                  HasForeignKey("PersonId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Book");

                b.Navigation("Person");

                b.Navigation("Role");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleByCompany", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("People").HasForeignKey("CompanyId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Person", "Person").WithMany("Companies").HasForeignKey("PersonId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Company");

                b.Navigation("Person");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleByDocument", b =>
            {
                b.HasOne("Marechai.Database.Models.Document", "Document").WithMany("People").
                  HasForeignKey("DocumentId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentPerson", "Person").WithMany("Documents").
                  HasForeignKey("PersonId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Document");

                b.Navigation("Person");

                b.Navigation("Role");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleByMagazine", b =>
            {
                b.HasOne("Marechai.Database.Models.MagazineIssue", "Magazine").WithMany("People").
                  HasForeignKey("MagazineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentPerson", "Person").WithMany("Magazines").
                  HasForeignKey("PersonId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Magazine");

                b.Navigation("Person");

                b.Navigation("Role");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleBySoftwareFamily", b =>
            {
                b.HasOne("Marechai.Database.Models.Person", "Person").WithMany("SoftwareFamilies").
                  HasForeignKey("PersonId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareFamily", "SoftwareFamily").WithMany("People").
                  HasForeignKey("SoftwareFamilyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Person");

                b.Navigation("Role");

                b.Navigation("SoftwareFamily");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.Person", "Person").WithMany("SoftwareVariants").
                  HasForeignKey("PersonId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("People").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Person");

                b.Navigation("Role");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.PeopleBySoftwareVersion", b =>
            {
                b.HasOne("Marechai.Database.Models.Person", "Person").WithMany("SoftwareVersions").
                  HasForeignKey("PersonId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.DocumentRole", "Role").WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVersion", "SoftwareVersion").WithMany("People").
                  HasForeignKey("SoftwareVersionId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Person");

                b.Navigation("Role");

                b.Navigation("SoftwareVersion");
            });

            modelBuilder.Entity("Marechai.Database.Models.Person", b =>
            {
                b.HasOne("Marechai.Database.Models.Iso31661Numeric", "CountryOfBirth").WithMany("People").
                  HasForeignKey("CountryOfBirthId");

                b.Navigation("CountryOfBirth");
            });

            modelBuilder.Entity("Marechai.Database.Models.Processor", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("Processors").
                  HasForeignKey("CompanyId").HasConstraintName("fk_processors_company");

                b.HasOne("Marechai.Database.Models.InstructionSet", "InstructionSet").WithMany("Processors").
                  HasForeignKey("InstructionSetId").HasConstraintName("fk_processors_instruction_set");

                b.Navigation("Company");

                b.Navigation("InstructionSet");
            });

            modelBuilder.Entity("Marechai.Database.Models.ProcessorsByMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Processors").
                  HasForeignKey("MachineId").HasConstraintName("fk_processors_by_machine_machine").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Processor", "Processor").WithMany("ProcessorsByMachine").
                  HasForeignKey("ProcessorId").HasConstraintName("fk_processors_by_machine_processor").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Machine");

                b.Navigation("Processor");
            });

            modelBuilder.Entity("Marechai.Database.Models.ProcessorsByOwnedMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.OwnedMachine", "OwnedMachine").WithMany("Processors").
                  HasForeignKey("OwnedMachineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Processor", "Processor").WithMany().HasForeignKey("ProcessorId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("OwnedMachine");

                b.Navigation("Processor");
            });

            modelBuilder.Entity("Marechai.Database.Models.ProcessorsBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.Processor", "Processor").WithMany("Software").
                  HasForeignKey("ProcessorId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("Processors").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Processor");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.RequiredOperatingSystemsBySofwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.SoftwareVersion", "OperatingSystem").WithMany().
                  HasForeignKey("OperatingSystemId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").
                  WithMany("RequiredOperatingSystems").HasForeignKey("SoftwareVariantId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("OperatingSystem");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.RequiredSoftwareBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("RequiredSoftware").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVersion", "SoftwareVersion").WithMany().
                  HasForeignKey("SoftwareVersionId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("SoftwareVariant");

                b.Navigation("SoftwareVersion");
            });

            modelBuilder.Entity("Marechai.Database.Models.ResolutionsByGpu", b =>
            {
                b.HasOne("Marechai.Database.Models.Gpu", "Gpu").WithMany("ResolutionsByGpu").HasForeignKey("GpuId").
                  HasConstraintName("fk_resolutions_by_gpu_gpu").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Resolution", "Resolution").WithMany("ResolutionsByGpu").
                  HasForeignKey("ResolutionId").HasConstraintName("fk_resolutions_by_gpu_resolution").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Gpu");

                b.Navigation("Resolution");
            });

            modelBuilder.Entity("Marechai.Database.Models.ResolutionsByScreen", b =>
            {
                b.HasOne("Marechai.Database.Models.Resolution", "Resolution").WithMany("ResolutionsByScreen").
                  HasForeignKey("ResolutionId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Screen", "Screen").WithMany("Resolutions").HasForeignKey("ScreenId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Resolution");

                b.Navigation("Screen");
            });

            modelBuilder.Entity("Marechai.Database.Models.Screen", b =>
            {
                b.HasOne("Marechai.Database.Models.Resolution", "NativeResolution").WithMany("Screens").
                  HasForeignKey("NativeResolutionId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("NativeResolution");
            });

            modelBuilder.Entity("Marechai.Database.Models.ScreensByMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Screens").HasForeignKey("MachineId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.Screen", "Screen").WithMany("ScreensByMachines").
                  HasForeignKey("ScreenId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Machine");

                b.Navigation("Screen");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareFamily", b =>
            {
                b.HasOne("Marechai.Database.Models.SoftwareFamily", "Parent").WithMany("Children").
                  HasForeignKey("ParentId").OnDelete(DeleteBehavior.SetNull);

                b.Navigation("Parent");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.SoftwareVariant", "Parent").WithMany("Derivates").
                  HasForeignKey("ParentId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("Marechai.Database.Models.SoftwareVersion", "SoftwareVersion").WithMany("Variants").
                  HasForeignKey("SoftwareVersionId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Parent");

                b.Navigation("SoftwareVersion");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareVariantByCompilationMedia", b =>
            {
                b.HasOne("Marechai.Database.Models.Media", "Media").WithMany().HasForeignKey("MediaId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany().
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Media");

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareVersion", b =>
            {
                b.HasOne("Marechai.Database.Models.SoftwareFamily", "Family").WithMany("Versions").
                  HasForeignKey("FamilyId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.License", "License").WithMany().HasForeignKey("LicenseId");

                b.HasOne("Marechai.Database.Models.SoftwareVersion", "Previous").WithOne("Next").
                  HasForeignKey("Marechai.Database.Models.SoftwareVersion", "PreviousId").
                  OnDelete(DeleteBehavior.SetNull);

                b.Navigation("Family");

                b.Navigation("License");

                b.Navigation("Previous");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoundByMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Sound").HasForeignKey("MachineId").
                  HasConstraintName("fk_sound_by_machine_machine").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoundSynth", "SoundSynth").WithMany("SoundByMachine").
                  HasForeignKey("SoundSynthId").HasConstraintName("fk_sound_by_machine_sound_synth").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Machine");

                b.Navigation("SoundSynth");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoundByOwnedMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.OwnedMachine", "OwnedMachine").WithMany("Sound").
                  HasForeignKey("OwnedMachineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoundSynth", "SoundSynth").WithMany().HasForeignKey("SoundSynthId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("OwnedMachine");

                b.Navigation("SoundSynth");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoundBySoftwareVariant", b =>
            {
                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("SupportedSound").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.SoundSynth", "SoundSynth").WithMany("Software").
                  HasForeignKey("SoundSynthId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("SoftwareVariant");

                b.Navigation("SoundSynth");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoundSynth", b =>
            {
                b.HasOne("Marechai.Database.Models.Company", "Company").WithMany("SoundSynths").
                  HasForeignKey("CompanyId").HasConstraintName("fk_sound_synths_company");

                b.Navigation("Company");
            });

            modelBuilder.Entity("Marechai.Database.Models.StandaloneFile", b =>
            {
                b.HasOne("Marechai.Database.Models.SoftwareVariant", "SoftwareVariant").WithMany("Files").
                  HasForeignKey("SoftwareVariantId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("SoftwareVariant");
            });

            modelBuilder.Entity("Marechai.Database.Models.StorageByMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.Machine", "Machine").WithMany("Storage").HasForeignKey("MachineId").
                  HasConstraintName("fk_storage_by_machine_machine").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("Machine");
            });

            modelBuilder.Entity("Marechai.Database.Models.StorageByOwnedMachine", b =>
            {
                b.HasOne("Marechai.Database.Models.OwnedMachine", "OwnedMachine").WithMany("Storage").
                  HasForeignKey("OwnedMachineId").OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.Navigation("OwnedMachine");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Marechai.Database.Models.ApplicationRole", null).WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("Marechai.Database.Models.ApplicationUser", null).WithMany().HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("Marechai.Database.Models.ApplicationUser", null).WithMany().HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Marechai.Database.Models.ApplicationRole", null).WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Marechai.Database.Models.ApplicationUser", null).WithMany().HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("Marechai.Database.Models.ApplicationUser", null).WithMany().HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();
            });

            modelBuilder.Entity("Marechai.Database.Models.ApplicationUser", b =>
            {
                b.Navigation("BookScans");

                b.Navigation("DocumentScans");

                b.Navigation("Dumps");

                b.Navigation("MagazineScans");

                b.Navigation("OwnedMachinePhotos");

                b.Navigation("OwnedMachines");

                b.Navigation("Photos");
            });

            modelBuilder.Entity("Marechai.Database.Models.Book", b =>
            {
                b.Navigation("Companies");

                b.Navigation("Derivates");

                b.Navigation("MachineFamilies");

                b.Navigation("Machines");

                b.Navigation("Next");

                b.Navigation("People");

                b.Navigation("Scans");
            });

            modelBuilder.Entity("Marechai.Database.Models.Company", b =>
            {
                b.Navigation("Descriptions");

                b.Navigation("DocumentCompany");

                b.Navigation("Gpus");

                b.Navigation("InverseSoldToNavigation");

                b.Navigation("Logos");

                b.Navigation("MachineFamilies");

                b.Navigation("Machines");

                b.Navigation("People");

                b.Navigation("Processors");

                b.Navigation("SoftwareFamilies");

                b.Navigation("SoftwareVariants");

                b.Navigation("SoftwareVersions");

                b.Navigation("SoundSynths");
            });

            modelBuilder.Entity("Marechai.Database.Models.Document", b =>
            {
                b.Navigation("Companies");

                b.Navigation("MachineFamilies");

                b.Navigation("Machines");

                b.Navigation("People");

                b.Navigation("Scans");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentCompany", b =>
            {
                b.Navigation("Books");

                b.Navigation("Documents");

                b.Navigation("Magazines");
            });

            modelBuilder.Entity("Marechai.Database.Models.DocumentPerson", b =>
            {
                b.Navigation("Books");

                b.Navigation("Documents");

                b.Navigation("Magazines");
            });

            modelBuilder.Entity("Marechai.Database.Models.Dump", b =>
            {
                b.Navigation("DumpHardware");
            });

            modelBuilder.Entity("Marechai.Database.Models.Filesystem", b =>
            {
                b.Navigation("Files");

                b.Navigation("MediaDumpFileImages");

                b.Navigation("Partitions");
            });

            modelBuilder.Entity("Marechai.Database.Models.Gpu", b =>
            {
                b.Navigation("GpusByMachine");

                b.Navigation("ResolutionsByGpu");

                b.Navigation("Software");
            });

            modelBuilder.Entity("Marechai.Database.Models.InstructionSet", b =>
            {
                b.Navigation("Processors");

                b.Navigation("Software");
            });

            modelBuilder.Entity("Marechai.Database.Models.InstructionSetExtension", b =>
            {
                b.Navigation("InstructionSetExtensionsByProcessor");
            });

            modelBuilder.Entity("Marechai.Database.Models.Iso31661Numeric", b =>
            {
                b.Navigation("Books");

                b.Navigation("Companies");

                b.Navigation("Documents");

                b.Navigation("Magazines");

                b.Navigation("People");
            });

            modelBuilder.Entity("Marechai.Database.Models.Iso639", b =>
            {
                b.Navigation("Software");
            });

            modelBuilder.Entity("Marechai.Database.Models.License", b =>
            {
                b.Navigation("OwnedMachinePhotos");

                b.Navigation("Photos");
            });

            modelBuilder.Entity("Marechai.Database.Models.LogicalPartition", b =>
            {
                b.Navigation("Filesystems");

                b.Navigation("Media");
            });

            modelBuilder.Entity("Marechai.Database.Models.Machine", b =>
            {
                b.Navigation("Books");

                b.Navigation("Documents");

                b.Navigation("Gpus");

                b.Navigation("Magazines");

                b.Navigation("Memory");

                b.Navigation("Photos");

                b.Navigation("Processors");

                b.Navigation("Screens");

                b.Navigation("Software");

                b.Navigation("Sound");

                b.Navigation("Storage");
            });

            modelBuilder.Entity("Marechai.Database.Models.MachineFamily", b =>
            {
                b.Navigation("Books");

                b.Navigation("Documents");

                b.Navigation("Machines");

                b.Navigation("Magazines");

                b.Navigation("Software");
            });

            modelBuilder.Entity("Marechai.Database.Models.Magazine", b =>
            {
                b.Navigation("Companies");

                b.Navigation("Issues");
            });

            modelBuilder.Entity("Marechai.Database.Models.MagazineIssue", b =>
            {
                b.Navigation("Coverdiscs");

                b.Navigation("MachineFamilies");

                b.Navigation("Machines");

                b.Navigation("People");

                b.Navigation("Scans");
            });

            modelBuilder.Entity("Marechai.Database.Models.Media", b =>
            {
                b.Navigation("Dumps");

                b.Navigation("LogicalPartitions");

                b.Navigation("MasteringTexts");

                b.Navigation("MediaDumps");

                b.Navigation("Software");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDump", b =>
            {
                b.Navigation("Dumps");

                b.Navigation("Files");

                b.Navigation("Image");

                b.Navigation("Subchannel");

                b.Navigation("Tags");

                b.Navigation("Tracks");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDumpFileImage", b =>
            {
                b.Navigation("Filesystems");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaDumpTrackImage", b =>
            {
                b.Navigation("Subchannel");
            });

            modelBuilder.Entity("Marechai.Database.Models.MediaFile", b =>
            {
                b.Navigation("DataStreams");
            });

            modelBuilder.Entity("Marechai.Database.Models.OwnedMachine", b =>
            {
                b.Navigation("Gpus");

                b.Navigation("Memory");

                b.Navigation("Photos");

                b.Navigation("Processors");

                b.Navigation("Sound");

                b.Navigation("Storage");
            });

            modelBuilder.Entity("Marechai.Database.Models.Person", b =>
            {
                b.Navigation("Companies");

                b.Navigation("DocumentPerson");

                b.Navigation("SoftwareFamilies");

                b.Navigation("SoftwareVariants");

                b.Navigation("SoftwareVersions");
            });

            modelBuilder.Entity("Marechai.Database.Models.Processor", b =>
            {
                b.Navigation("InstructionSetExtensions");

                b.Navigation("ProcessorsByMachine");

                b.Navigation("Software");
            });

            modelBuilder.Entity("Marechai.Database.Models.Resolution", b =>
            {
                b.Navigation("ResolutionsByGpu");

                b.Navigation("ResolutionsByScreen");

                b.Navigation("Screens");
            });

            modelBuilder.Entity("Marechai.Database.Models.Screen", b =>
            {
                b.Navigation("Resolutions");

                b.Navigation("ScreensByMachines");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareFamily", b =>
            {
                b.Navigation("Children");

                b.Navigation("Companies");

                b.Navigation("People");

                b.Navigation("Versions");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareVariant", b =>
            {
                b.Navigation("Architectures");

                b.Navigation("Companies");

                b.Navigation("Derivates");

                b.Navigation("Files");

                b.Navigation("Gpus");

                b.Navigation("Languages");

                b.Navigation("MachineFamilies");

                b.Navigation("Machines");

                b.Navigation("Media");

                b.Navigation("People");

                b.Navigation("Processors");

                b.Navigation("RequiredOperatingSystems");

                b.Navigation("RequiredSoftware");

                b.Navigation("SupportedSound");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoftwareVersion", b =>
            {
                b.Navigation("Companies");

                b.Navigation("Next");

                b.Navigation("People");

                b.Navigation("Variants");
            });

            modelBuilder.Entity("Marechai.Database.Models.SoundSynth", b =>
            {
                b.Navigation("Software");

                b.Navigation("SoundByMachine");
            });

            modelBuilder.Entity("Marechai.Database.Models.StandaloneFile", b =>
            {
                b.Navigation("DataStreams");
            });
            #pragma warning restore 612, 618
        }
    }
}