@{
/******************************************************************************
// MARECHAI: Master repository of computing history artifacts information
// ----------------------------------------------------------------------------
//
// Filename       : Details.cshtml
// Author(s)      : Natalia Portillo <claunia@claunia.com>
//
// --[ Description ] ----------------------------------------------------------
//
//     Admin view details
//
// --[ License ] --------------------------------------------------------------
//
//     This program is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as
//     published by the Free Software Foundation, either version 3 of the
//     License, or (at your option) any later version.
//
//     This program is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// ----------------------------------------------------------------------------
// Copyright Â© 2003-2020 Natalia Portillo
*******************************************************************************/
}

@page "/admin/companies/details/{Id:int}"
@page "/admin/companies/edit/{Id:int}"
@page "/admin/companies/create"
@using Marechai.Database
@inherits OwningComponentBase<CompaniesService>
@inject IStringLocalizer<CompaniesService> L
@inject Iso31661NumericService CountriesService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "UberAdmin, Admin")]
<h3>@L["Company details"]</h3>
<hr />

@if (!_loaded)
{
    <p align="center">@L["Loading..."]</p>

    return;
}

<div>
    <Field>
        <FieldLabel>@L["Name"]</FieldLabel>
        <Validation Validator="@ValidateName">
            <TextEdit ReadOnly="!_editing" @bind-Text="@_model.Name">
                <Feedback>
                    <ValidationError>@L["Please enter a valid name."]</ValidationError>
                </Feedback>
            </TextEdit>
        </Validation>
    </Field>
    <Field>
        <FieldLabel>@L["Status"]</FieldLabel>
        <Select Disabled="!_editing" TValue="int" @bind-SelectedValue="@Status">
            @foreach (int status in Enum.GetValues(typeof(CompanyStatus)))
            {
                <SelectItem TValue="int" Value="@status">@(((CompanyStatus)status).ToString())</SelectItem>
            }
        </Select>
    </Field>
    @if (_editing || _model.Founded != null)
    {
        <Field>
            <FieldLabel>@L["Founded"]</FieldLabel>
            @if (_editing)
            {
                <Check TValue="bool" @bind-Checked="@_unknownFounded">@L["Unknown (foundation date)"]</Check>
            }
            @if (!_editing || !_unknownFounded)
            {
                <Validation Validator="@ValidateFounded">
                    <DateEdit TValue="DateTime?" ReadOnly="!_editing" @bind-Text="@_model.Founded" >
                        <Feedback>
                            <ValidationError>@L["Please enter a valid foundation date."]</ValidationError>
                        </Feedback>
                    </DateEdit>
                </Validation>
            }
        </Field>
    }
    @if (_editing || _model.Website != null)
    {
        <Field>
            <FieldLabel>@L["Website"]</FieldLabel>
            @if (_editing)
            {
                <Check TValue="bool" @bind-Checked="@_unknownWebsite">@L["Unknown (website)"]</Check>
            }
            @if (!_editing ||
                 !_unknownWebsite)
            {
                <Validation Validator="@ValidateWebsite">
                    <TextEdit ReadOnly="!_editing" @bind-Text="@_model.Website">
                        <Feedback>
                            <ValidationError>@L["Please enter a valid website."]</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            }
        </Field>
    }
    @if (_editing || _model.Twitter != null)
    {
        <Field>
            <FieldLabel>@L["Twitter"]</FieldLabel>
            @if (_editing)
            {
                <Check TValue="bool" @bind-Checked="@_unknownTwitter">@L["Unknown (twitter)"]</Check>
            }
            @if (!_editing ||
                 !_unknownTwitter)
            {
                <Validation Validator="@ValidateTwitter">
                    <TextEdit ReadOnly="!_editing" @bind-Text="@_model.Twitter">
                        <Feedback>
                            <ValidationError>@L["Please enter a valid Twitter handle."]</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            }
        </Field>
    }
    @if (_editing || _model.Facebook != null)
    {
        <Field>
            <FieldLabel>@L["Facebook"]</FieldLabel>
            @if (_editing)
            {
                <Check TValue="bool" @bind-Checked="@_unknownFacebook">@L["Unknown (facebook)"]</Check>
            }
            @if (!_editing ||
                 !_unknownFacebook)
            {
                <Validation Validator="@ValidateFacebook">
                    <TextEdit ReadOnly="!_editing" @bind-Text="@_model.Facebook">
                        <Feedback>
                            <ValidationError>@L["Please enter a valid Facebook user name."]</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            }
        </Field>
    }
    @if (_editing || _model.Address != null)
    {
        <Field>
            <FieldLabel>@L["Address"]</FieldLabel>
            @if (_editing)
            {
                <Check TValue="bool" @bind-Checked="@_unknownAddress">@L["Unknown (address)"]</Check>
            }
            @if (!_editing ||
                 !_unknownAddress)
            {
                <Validation Validator="@ValidateAddress">
                    <TextEdit ReadOnly="!_editing" @bind-Text="@_model.Address">
                        <Feedback>
                            <ValidationError>@L["Please enter a valid address."]</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            }
        </Field>
    }
    @if (_editing || _model.City != null)
    {
        <Field>
            <FieldLabel>@L["City"]</FieldLabel>
            @if (_editing)
            {
                <Check TValue="bool" @bind-Checked="@_unknownCity">@L["Unknown (city)"]</Check>
            }
            @if (!_editing ||
                 !_unknownCity)
            {
                <Validation Validator="@ValidateCity">
                    <TextEdit ReadOnly="!_editing" @bind-Text="@_model.City">
                        <Feedback>
                            <ValidationError>@L["Please enter a valid city."]</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            }
        </Field>
    }
    @if (_editing || _model.Province != null)
    {
        <Field>
            <FieldLabel>@L["Province"]</FieldLabel>
            @if (_editing)
            {
                <Check TValue="bool" @bind-Checked="@_unknownProvince">@L["Unknown (province)"]</Check>
            }
            @if (!_editing ||
                 !_unknownProvince)
            {
                <Validation Validator="@ValidateProvince">
                    <TextEdit ReadOnly="!_editing" @bind-Text="@_model.Province">
                        <Feedback>
                            <ValidationError>@L["Please enter a valid province."]</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            }
        </Field>
    }
    @if (_editing || _model.PostalCode != null)
    {
        <Field>
            <FieldLabel>@L["Postal code"]</FieldLabel>
            @if (_editing)
            {
                <Check TValue="bool" @bind-Checked="@_unknownPostalCode">@L["Unknown (postal code)"]</Check>
            }
            @if (!_editing ||
                 !_unknownPostalCode)
            {
                <Validation Validator="@ValidatePostalCode">
                    <TextEdit ReadOnly="!_editing" @bind-Text="@_model.PostalCode">
                        <Feedback>
                            <ValidationError>@L["Please enter a valid postal code."]</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            }
        </Field>
    }
    @if (_editing || _model.CountryId != null)
    {
        <Field>
            <FieldLabel>@L["Country"]</FieldLabel>
            @if (_editing)
            {
                <Check TValue="bool" @bind-Checked="@_unknownCountry">@L["Unknown (country)"]</Check>
            }
            @if (!_editing ||
                 !_unknownCountry)
            {
                <Select Disabled="!_editing" TValue="short?" @bind-SelectedValue="@_model.CountryId">
                    @foreach (var country in _countries)
                    {
                        <SelectItem TValue="short?" Value="@country.Id">@country.Name</SelectItem>
                    }
                </Select>
            }
        </Field>
    }
    @if (((int)_model.Status) > 1)
    {
        @if (_editing || _model.Sold != null)
        {
            <Field>
                <FieldLabel>@L["Sold"]</FieldLabel>
                @if (_editing)
                {
                    <Check TValue="bool" @bind-Checked="@_unknownSold">@L["Unknown (sold/merged/bankrupt date)"]</Check>
                }
                @if (!_editing ||
                     !_unknownSold)
                {
                    <Validation Validator="@ValidateSold">
                        <DateEdit TValue="DateTime?" ReadOnly="!_editing" @bind-Text="@_model.Sold">
                            <Feedback>
                                <ValidationError>@L["Please enter a valid sold/merge/bankruptcy date."]</ValidationError>
                            </Feedback>
                        </DateEdit>
                    </Validation>
                }
            </Field>
        }
        @if (_editing || _model.SoldToId != null)
        {
            <Field>
                <FieldLabel>@L["Sold to"]</FieldLabel>
                @if (_editing)
                {
                    <Check TValue="bool" @bind-Checked="@_unknownSoldTo">@L["Unknown (sold to)"]</Check>
                }
                @if (!_editing ||
                     !_unknownSoldTo)
                {
                    <Select Disabled="!_editing" TValue="int?" @bind-SelectedValue="@_model.SoldToId">
                        @foreach (var company in _companies)
                        {
                            <SelectItem TValue="int?" Value="@company.Id">@company.Name</SelectItem>
                        }
                    </Select>
                }
            </Field>
        }
    }
</div>
<div>
    @if (!_editing)
    {
        <Button Color="Color.Primary" Clicked="@OnEditClicked">@L["Edit"]</Button>
    }
    else
    {
        <Button Color="Color.Success" Clicked="@OnSaveClicked">@L["Save"]</Button>
        <Button Color="Color.Danger" Clicked="@OnCancelClicked">@L["Cancel"]</Button>
    }
    <a href="/admin/companies" class="btn btn-secondary">@L["Back to list"]</a>
</div>